var tipuesearch = {"pages": [
     {"title": "BrookExtra", "text": " ", "tags": "", "loc": "BrookExtra.html"},
     {"title": "BrookExtra.BROOK_POST_BUFFER_SIZE", "text": " ", "tags": "", "loc": "BrookExtra.html#BROOK_POST_BUFFER_SIZE"},
     {"title": "BrookExtra.BROOK_PAYLOAD_LIMIT", "text": " ", "tags": "", "loc": "BrookExtra.html#BROOK_PAYLOAD_LIMIT"},
     {"title": "BrookExtra.BROOK_UPLOADS_LIMIT", "text": " ", "tags": "", "loc": "BrookExtra.html#BROOK_UPLOADS_LIMIT"},
     {"title": "BrookExtra.BROOK_MIN_BUFFER_SIZE", "text": " ", "tags": "", "loc": "BrookExtra.html#BROOK_MIN_BUFFER_SIZE"},
     {"title": "BrookExtra.BROOK_BUFFER_SIZE", "text": " ", "tags": "", "loc": "BrookExtra.html#BROOK_BUFFER_SIZE"},
     {"title": "BrookExtra.BROOK_FILE_RIGHTS", "text": " ", "tags": "", "loc": "BrookExtra.html#BROOK_FILE_RIGHTS"},
     {"title": "BrookExtra.BROOK_CT_TEXT_PLAIN", "text": " ", "tags": "", "loc": "BrookExtra.html#BROOK_CT_TEXT_PLAIN"},
     {"title": "BrookExtra.BROOK_CT_OCTET_STREAM", "text": " ", "tags": "", "loc": "BrookExtra.html#BROOK_CT_OCTET_STREAM"},
     {"title": "BrookHandledClasses", "text": " ", "tags": "", "loc": "BrookHandledClasses.html"},
     {"title": "BrookHandledClasses.TBrookHandledPersistent", "text": " ", "tags": "", "loc": "BrookHandledClasses.TBrookHandledPersistent.html"},
     {"title": "BrookHandledClasses.TBrookHandledPersistent.Handle", "text": " ", "tags": "", "loc": "BrookHandledClasses.TBrookHandledPersistent.html#Handle"},
     {"title": "BrookHandledClasses.TBrookHandledCollectionItem", "text": " ", "tags": "", "loc": "BrookHandledClasses.TBrookHandledCollectionItem.html"},
     {"title": "BrookHandledClasses.TBrookHandledCollectionItem.Handle", "text": " ", "tags": "", "loc": "BrookHandledClasses.TBrookHandledCollectionItem.html#Handle"},
     {"title": "BrookHandledClasses.TBrookHandledOwnedCollection", "text": " ", "tags": "", "loc": "BrookHandledClasses.TBrookHandledOwnedCollection.html"},
     {"title": "BrookHandledClasses.TBrookHandledOwnedCollection.Handle", "text": " ", "tags": "", "loc": "BrookHandledClasses.TBrookHandledOwnedCollection.html#Handle"},
     {"title": "BrookHandledClasses.TBrookHandledComponent", "text": " ", "tags": "", "loc": "BrookHandledClasses.TBrookHandledComponent.html"},
     {"title": "BrookHandledClasses.TBrookHandledComponent.Handle", "text": " ", "tags": "", "loc": "BrookHandledClasses.TBrookHandledComponent.html#Handle"},
     {"title": "BrookHTTPAuthentication", "text": " ", "tags": "", "loc": "BrookHTTPAuthentication.html"},
     {"title": "BrookHTTPAuthentication.TBrookHTTPCredentials", "text": " ", "tags": "", "loc": "BrookHTTPAuthentication.TBrookHTTPCredentials.html"},
     {"title": "BrookHTTPAuthentication.TBrookHTTPCredentials.Create", "text": "   AHandle[in] Authentication <a class=\"normal\" href=\"BrookHandledClasses.TBrookHandledPersistent.html#Handle\">handle</a>.  AHandle[in] Authentication <a class=\"normal\" href=\"BrookHandledClasses.TBrookHandledPersistent.html#Handle\">handle</a>.", "tags": "", "loc": "BrookHTTPAuthentication.TBrookHTTPCredentials.html#Create"},
     {"title": "BrookHTTPAuthentication.TBrookHTTPCredentials.Realm", "text": " ", "tags": "", "loc": "BrookHTTPAuthentication.TBrookHTTPCredentials.html#Realm"},
     {"title": "BrookHTTPAuthentication.TBrookHTTPCredentials.UserName", "text": " ", "tags": "", "loc": "BrookHTTPAuthentication.TBrookHTTPCredentials.html#UserName"},
     {"title": "BrookHTTPAuthentication.TBrookHTTPCredentials.Password", "text": " ", "tags": "", "loc": "BrookHTTPAuthentication.TBrookHTTPCredentials.html#Password"},
     {"title": "BrookHTTPAuthentication.TBrookHTTPAuthentication", "text": " ", "tags": "", "loc": "BrookHTTPAuthentication.TBrookHTTPAuthentication.html"},
     {"title": "BrookHTTPAuthentication.TBrookHTTPAuthentication.Create", "text": "   AHandle[in] Authentication <a class=\"normal\" href=\"BrookHandledClasses.TBrookHandledPersistent.html#Handle\">handle</a>.  AHandle[in] Authentication <a class=\"normal\" href=\"BrookHandledClasses.TBrookHandledPersistent.html#Handle\">handle</a>.", "tags": "", "loc": "BrookHTTPAuthentication.TBrookHTTPAuthentication.html#Create"},
     {"title": "BrookHTTPAuthentication.TBrookHTTPAuthentication.Destroy", "text": "    ", "tags": "", "loc": "BrookHTTPAuthentication.TBrookHTTPAuthentication.html#Destroy"},
     {"title": "BrookHTTPAuthentication.TBrookHTTPAuthentication.Deny", "text": "     AReason[in] Denial reason. AContentType[in] Content type. AStatus[in] HTTP status code.  AReason[in] Denial reason. AContentType[in] Content type. AStatus[in] HTTP status code.", "tags": "", "loc": "BrookHTTPAuthentication.TBrookHTTPAuthentication.html#Deny"},
     {"title": "BrookHTTPAuthentication.TBrookHTTPAuthentication.Deny", "text": "      AFmt[in] Formatted string. AArgs[in] Arguments to compose the formatted reason. AContentType[in] Content type. AStatus[in] HTTP status code.  AFmt[in] Formatted string. AArgs[in] Arguments to compose the formatted reason. AContentType[in] Content type. AStatus[in] HTTP status code.", "tags": "", "loc": "BrookHTTPAuthentication.TBrookHTTPAuthentication.html#Deny"},
     {"title": "BrookHTTPAuthentication.TBrookHTTPAuthentication.Deny", "text": "    AReason[in] Denial reason. AContentType[in] Content type.  AReason[in] Denial reason. AContentType[in] Content type.", "tags": "", "loc": "BrookHTTPAuthentication.TBrookHTTPAuthentication.html#Deny"},
     {"title": "BrookHTTPAuthentication.TBrookHTTPAuthentication.Deny", "text": "     AFmt[in] Formatted string. AArgs[in] Arguments to compose the formatted reason. AContentType[in] Content type.  AFmt[in] Formatted string. AArgs[in] Arguments to compose the formatted reason. AContentType[in] Content type.", "tags": "", "loc": "BrookHTTPAuthentication.TBrookHTTPAuthentication.html#Deny"},
     {"title": "BrookHTTPAuthentication.TBrookHTTPAuthentication.Cancel", "text": "    ", "tags": "", "loc": "BrookHTTPAuthentication.TBrookHTTPAuthentication.html#Cancel"},
     {"title": "BrookHTTPAuthentication.TBrookHTTPAuthentication.Credentials", "text": " ", "tags": "", "loc": "BrookHTTPAuthentication.TBrookHTTPAuthentication.html#Credentials"},
     {"title": "BrookHTTPAuthentication.SBrookInvalidHTTPStatus", "text": " ", "tags": "", "loc": "BrookHTTPAuthentication.html#SBrookInvalidHTTPStatus"},
     {"title": "BrookHTTPCookies", "text": " ", "tags": "", "loc": "BrookHTTPCookies.html"},
     {"title": "BrookHTTPCookies.EBrookHTTPCookie", "text": " ", "tags": "", "loc": "BrookHTTPCookies.EBrookHTTPCookie.html"},
     {"title": "BrookHTTPCookies.TBrookHTTPCookie", "text": " ", "tags": "", "loc": "BrookHTTPCookies.TBrookHTTPCookie.html"},
     {"title": "BrookHTTPCookies.TBrookHTTPCookie.Create", "text": "   ACollection[in] Cookies list.  ACollection[in] Cookies list.", "tags": "", "loc": "BrookHTTPCookies.TBrookHTTPCookie.html#Create"},
     {"title": "BrookHTTPCookies.TBrookHTTPCookie.Assign", "text": "   ASource[in] Cookie source to be copied.  ASource[in] Cookie source to be copied.", "tags": "", "loc": "BrookHTTPCookies.TBrookHTTPCookie.html#Assign"},
     {"title": "BrookHTTPCookies.TBrookHTTPCookie.Sign", "text": "     ASecret[in] Secret key to <a class=\"normal\" href=\"BrookHTTPCookies.TBrookHTTPCookie.html#Sign\">sign</a> the cookie <a class=\"normal\" href=\"BrookHTTPCookies.TBrookHTTPCookie.html#Value\">value</a>. AUnsignedValue[in] Unsigned cookie <a class=\"normal\" href=\"BrookHTTPCookies.TBrookHTTPCookie.html#Value\">value</a> to be signed. Signed cookie <a class=\"normal\" href=\"BrookHTTPCookies.TBrookHTTPCookie.html#Value\">value</a>. ASecret[in] Secret key to <a class=\"normal\" href=\"BrookHTTPCookies.TBrookHTTPCookie.html#Sign\">sign</a> the cookie <a class=\"normal\" href=\"BrookHTTPCookies.TBrookHTTPCookie.html#Value\">value</a>. AUnsignedValue[in] Unsigned cookie <a class=\"normal\" href=\"BrookHTTPCookies.TBrookHTTPCookie.html#Value\">value</a> to be signed.", "tags": "", "loc": "BrookHTTPCookies.TBrookHTTPCookie.html#Sign"},
     {"title": "BrookHTTPCookies.TBrookHTTPCookie.TryUnsign", "text": "      ASecret[in] Secret key to <a class=\"normal\" href=\"BrookHTTPCookies.TBrookHTTPCookie.html#Unsign\">unsign</a> the cookie <a class=\"normal\" href=\"BrookHTTPCookies.TBrookHTTPCookie.html#Value\">value</a>. ASignedValue[out] Signed cookie <a class=\"normal\" href=\"BrookHTTPCookies.TBrookHTTPCookie.html#Value\">value</a>. AUnsignedValue[out] Unsigned cookie <a class=\"normal\" href=\"BrookHTTPCookies.TBrookHTTPCookie.html#Value\">value</a>. <code>True</code> if cookie <a class=\"normal\" href=\"BrookHTTPCookies.TBrookHTTPCookie.html#Value\">value</a> is unsigned successfully. ASecret[in] Secret key to <a class=\"normal\" href=\"BrookHTTPCookies.TBrookHTTPCookie.html#Unsign\">unsign</a> the cookie <a class=\"normal\" href=\"BrookHTTPCookies.TBrookHTTPCookie.html#Value\">value</a>. ASignedValue[out] Signed cookie <a class=\"normal\" href=\"BrookHTTPCookies.TBrookHTTPCookie.html#Value\">value</a>. AUnsignedValue[out] Unsigned cookie <a class=\"normal\" href=\"BrookHTTPCookies.TBrookHTTPCookie.html#Value\">value</a>.", "tags": "", "loc": "BrookHTTPCookies.TBrookHTTPCookie.html#TryUnsign"},
     {"title": "BrookHTTPCookies.TBrookHTTPCookie.Unsign", "text": "     ASecret[in] Secret key to <a class=\"normal\" href=\"BrookHTTPCookies.TBrookHTTPCookie.html#Unsign\">unsign</a> the cookie <a class=\"normal\" href=\"BrookHTTPCookies.TBrookHTTPCookie.html#Value\">value</a>. ASignedValue[in] Signed cookie <a class=\"normal\" href=\"BrookHTTPCookies.TBrookHTTPCookie.html#Value\">value</a>. Unsigned cookie <a class=\"normal\" href=\"BrookHTTPCookies.TBrookHTTPCookie.html#Value\">value</a>. ASecret[in] Secret key to <a class=\"normal\" href=\"BrookHTTPCookies.TBrookHTTPCookie.html#Unsign\">unsign</a> the cookie <a class=\"normal\" href=\"BrookHTTPCookies.TBrookHTTPCookie.html#Value\">value</a>. ASignedValue[in] Signed cookie <a class=\"normal\" href=\"BrookHTTPCookies.TBrookHTTPCookie.html#Value\">value</a>.", "tags": "", "loc": "BrookHTTPCookies.TBrookHTTPCookie.html#Unsign"},
     {"title": "BrookHTTPCookies.TBrookHTTPCookie.IsSigned", "text": "    ASignedValue[out] Signed cookie <a class=\"normal\" href=\"BrookHTTPCookies.TBrookHTTPCookie.html#Value\">value</a>. <code>True</code> if cookie <a class=\"normal\" href=\"BrookHTTPCookies.TBrookHTTPCookie.html#Value\">value</a> is signed. ASignedValue[out] Signed cookie <a class=\"normal\" href=\"BrookHTTPCookies.TBrookHTTPCookie.html#Value\">value</a>.", "tags": "", "loc": "BrookHTTPCookies.TBrookHTTPCookie.html#IsSigned"},
     {"title": "BrookHTTPCookies.TBrookHTTPCookie.IsSigned", "text": "    <code>True</code> if cookie is signed. ", "tags": "", "loc": "BrookHTTPCookies.TBrookHTTPCookie.html#IsSigned"},
     {"title": "BrookHTTPCookies.TBrookHTTPCookie.Sign", "text": "   ASecret[in] Secret key to <code>sign</code> the cookie <a class=\"normal\" href=\"BrookHTTPCookies.TBrookHTTPCookie.html#Value\">value</a>.  ASecret[in] Secret key to <code>sign</code> the cookie <a class=\"normal\" href=\"BrookHTTPCookies.TBrookHTTPCookie.html#Value\">value</a>.", "tags": "", "loc": "BrookHTTPCookies.TBrookHTTPCookie.html#Sign"},
     {"title": "BrookHTTPCookies.TBrookHTTPCookie.TryUnsign", "text": "    ASecret[in] Secret key to <a class=\"normal\" href=\"BrookHTTPCookies.TBrookHTTPCookie.html#Unsign\">unsign</a> the cookie <a class=\"normal\" href=\"BrookHTTPCookies.TBrookHTTPCookie.html#Value\">value</a>. <code>True</code> if cookie is unsigned successfully. ASecret[in] Secret key to <a class=\"normal\" href=\"BrookHTTPCookies.TBrookHTTPCookie.html#Unsign\">unsign</a> the cookie <a class=\"normal\" href=\"BrookHTTPCookies.TBrookHTTPCookie.html#Value\">value</a>.", "tags": "", "loc": "BrookHTTPCookies.TBrookHTTPCookie.html#TryUnsign"},
     {"title": "BrookHTTPCookies.TBrookHTTPCookie.Unsign", "text": "   ASecret[in] Secret key to <code>unsign</code> the cookie <a class=\"normal\" href=\"BrookHTTPCookies.TBrookHTTPCookie.html#Value\">value</a>.  ASecret[in] Secret key to <code>unsign</code> the cookie <a class=\"normal\" href=\"BrookHTTPCookies.TBrookHTTPCookie.html#Value\">value</a>.", "tags": "", "loc": "BrookHTTPCookies.TBrookHTTPCookie.html#Unsign"},
     {"title": "BrookHTTPCookies.TBrookHTTPCookie.ToString", "text": "    ", "tags": "", "loc": "BrookHTTPCookies.TBrookHTTPCookie.html#ToString"},
     {"title": "BrookHTTPCookies.TBrookHTTPCookie.Clear", "text": "    ", "tags": "", "loc": "BrookHTTPCookies.TBrookHTTPCookie.html#Clear"},
     {"title": "BrookHTTPCookies.TBrookHTTPCookie.Expire", "text": "    ", "tags": "", "loc": "BrookHTTPCookies.TBrookHTTPCookie.html#Expire"},
     {"title": "BrookHTTPCookies.TBrookHTTPCookie.Persist", "text": "    ", "tags": "", "loc": "BrookHTTPCookies.TBrookHTTPCookie.html#Persist"},
     {"title": "BrookHTTPCookies.TBrookHTTPCookie.Name", "text": " ", "tags": "", "loc": "BrookHTTPCookies.TBrookHTTPCookie.html#Name"},
     {"title": "BrookHTTPCookies.TBrookHTTPCookie.Value", "text": " ", "tags": "", "loc": "BrookHTTPCookies.TBrookHTTPCookie.html#Value"},
     {"title": "BrookHTTPCookies.TBrookHTTPCookie.Domain", "text": " ", "tags": "", "loc": "BrookHTTPCookies.TBrookHTTPCookie.html#Domain"},
     {"title": "BrookHTTPCookies.TBrookHTTPCookie.Path", "text": " ", "tags": "", "loc": "BrookHTTPCookies.TBrookHTTPCookie.html#Path"},
     {"title": "BrookHTTPCookies.TBrookHTTPCookie.Expires", "text": " ", "tags": "", "loc": "BrookHTTPCookies.TBrookHTTPCookie.html#Expires"},
     {"title": "BrookHTTPCookies.TBrookHTTPCookie.HttpOnly", "text": " ", "tags": "", "loc": "BrookHTTPCookies.TBrookHTTPCookie.html#HttpOnly"},
     {"title": "BrookHTTPCookies.TBrookHTTPCookie.Secure", "text": " ", "tags": "", "loc": "BrookHTTPCookies.TBrookHTTPCookie.html#Secure"},
     {"title": "BrookHTTPCookies.TBrookHTTPCookie.MaxAge", "text": " ", "tags": "", "loc": "BrookHTTPCookies.TBrookHTTPCookie.html#MaxAge"},
     {"title": "BrookHTTPCookies.TBrookHTTPCookie.SameSite", "text": " ", "tags": "", "loc": "BrookHTTPCookies.TBrookHTTPCookie.html#SameSite"},
     {"title": "BrookHTTPCookies.TBrookHTTPCookiesEnumerator", "text": " ", "tags": "", "loc": "BrookHTTPCookies.TBrookHTTPCookiesEnumerator.html"},
     {"title": "BrookHTTPCookies.TBrookHTTPCookiesEnumerator.GetCurrent", "text": "    ", "tags": "", "loc": "BrookHTTPCookies.TBrookHTTPCookiesEnumerator.html#GetCurrent"},
     {"title": "BrookHTTPCookies.TBrookHTTPCookiesEnumerator.Current", "text": " ", "tags": "", "loc": "BrookHTTPCookies.TBrookHTTPCookiesEnumerator.html#Current"},
     {"title": "BrookHTTPCookies.TBrookHTTPCookies", "text": " ", "tags": "", "loc": "BrookHTTPCookies.TBrookHTTPCookies.html"},
     {"title": "BrookHTTPCookies.TBrookHTTPCookies.Create", "text": "   AOwner[in] Cookies persistent.  AOwner[in] Cookies persistent.", "tags": "", "loc": "BrookHTTPCookies.TBrookHTTPCookies.html#Create"},
     {"title": "BrookHTTPCookies.TBrookHTTPCookies.GetCookieClass", "text": "    ", "tags": "", "loc": "BrookHTTPCookies.TBrookHTTPCookies.html#GetCookieClass"},
     {"title": "BrookHTTPCookies.TBrookHTTPCookies.Assign", "text": "   ASource[in] Cookies source to be copied.  ASource[in] Cookies source to be copied.", "tags": "", "loc": "BrookHTTPCookies.TBrookHTTPCookies.html#Assign"},
     {"title": "BrookHTTPCookies.TBrookHTTPCookies.GetEnumerator", "text": "    ", "tags": "", "loc": "BrookHTTPCookies.TBrookHTTPCookies.html#GetEnumerator"},
     {"title": "BrookHTTPCookies.TBrookHTTPCookies.Add", "text": "    ", "tags": "", "loc": "BrookHTTPCookies.TBrookHTTPCookies.html#Add"},
     {"title": "BrookHTTPCookies.TBrookHTTPCookies.Remove", "text": "   AName[in] Cookie name.  AName[in] Cookie name.", "tags": "", "loc": "BrookHTTPCookies.TBrookHTTPCookies.html#Remove"},
     {"title": "BrookHTTPCookies.TBrookHTTPCookies.IndexOf", "text": "    ", "tags": "", "loc": "BrookHTTPCookies.TBrookHTTPCookies.html#IndexOf"},
     {"title": "BrookHTTPCookies.TBrookHTTPCookies.Find", "text": "   AName[in] Cookie name.  AName[in] Cookie name.", "tags": "", "loc": "BrookHTTPCookies.TBrookHTTPCookies.html#Find"},
     {"title": "BrookHTTPCookies.TBrookHTTPCookies.First", "text": "    ", "tags": "", "loc": "BrookHTTPCookies.TBrookHTTPCookies.html#First"},
     {"title": "BrookHTTPCookies.TBrookHTTPCookies.Last", "text": "    ", "tags": "", "loc": "BrookHTTPCookies.TBrookHTTPCookies.html#Last"},
     {"title": "BrookHTTPCookies.TBrookHTTPCookies.Items", "text": " ", "tags": "", "loc": "BrookHTTPCookies.TBrookHTTPCookies.html#Items"},
     {"title": "BrookHTTPCookies.BROOK_COOKIE_SIG_PREFIX", "text": " ", "tags": "", "loc": "BrookHTTPCookies.html#BROOK_COOKIE_SIG_PREFIX"},
     {"title": "BrookHTTPCookies.BROOK_COOKIE_NAME_PREFIX", "text": " ", "tags": "", "loc": "BrookHTTPCookies.html#BROOK_COOKIE_NAME_PREFIX"},
     {"title": "BrookHTTPCookies.SBrookEmptyCookieName", "text": " ", "tags": "", "loc": "BrookHTTPCookies.html#SBrookEmptyCookieName"},
     {"title": "BrookHTTPCookies.SBrookInvalidCookieName", "text": " ", "tags": "", "loc": "BrookHTTPCookies.html#SBrookInvalidCookieName"},
     {"title": "BrookHTTPCookies.TBrookHTTPCookieSameSite", "text": "  ssNone The browser will send cookies with both cross-site requests and same-site requests.   ssStrict The browser will only send cookies for same-site requests.   ssLax Same-site cookies are withheld on cross-site subrequests, but will be sent when a user navigates to the URL from an external site.  ", "tags": "", "loc": "BrookHTTPCookies.html#TBrookHTTPCookieSameSite"},
     {"title": "BrookHTTPCookies.TBrookHTTPCookieClass", "text": " ", "tags": "", "loc": "BrookHTTPCookies.html#TBrookHTTPCookieClass"},
     {"title": "BrookHTTPRequest", "text": " ", "tags": "", "loc": "BrookHTTPRequest.html"},
     {"title": "BrookHTTPRequest.TBrookHTTPRequest", "text": " ", "tags": "", "loc": "BrookHTTPRequest.TBrookHTTPRequest.html"},
     {"title": "BrookHTTPRequest.TBrookHTTPRequest.Create", "text": "   AHandle[in] Request <a class=\"normal\" href=\"BrookHandledClasses.TBrookHandledPersistent.html#Handle\">handle</a>.  AHandle[in] Request <a class=\"normal\" href=\"BrookHandledClasses.TBrookHandledPersistent.html#Handle\">handle</a>.", "tags": "", "loc": "BrookHTTPRequest.TBrookHTTPRequest.html#Create"},
     {"title": "BrookHTTPRequest.TBrookHTTPRequest.Destroy", "text": "    ", "tags": "", "loc": "BrookHTTPRequest.TBrookHTTPRequest.html#Destroy"},
     {"title": "BrookHTTPRequest.TBrookHTTPRequest.IsPost", "text": "    ", "tags": "", "loc": "BrookHTTPRequest.TBrookHTTPRequest.html#IsPost"},
     {"title": "BrookHTTPRequest.TBrookHTTPRequest.IsFavicon", "text": "    ", "tags": "", "loc": "BrookHTTPRequest.TBrookHTTPRequest.html#IsFavicon"},
     {"title": "BrookHTTPRequest.TBrookHTTPRequest.IsSecure", "text": "    ", "tags": "", "loc": "BrookHTTPRequest.TBrookHTTPRequest.html#IsSecure"},
     {"title": "BrookHTTPRequest.TBrookHTTPRequest.IsCachable", "text": "    ", "tags": "", "loc": "BrookHTTPRequest.TBrookHTTPRequest.html#IsCachable"},
     {"title": "BrookHTTPRequest.TBrookHTTPRequest.IsXhr", "text": "    ", "tags": "", "loc": "BrookHTTPRequest.TBrookHTTPRequest.html#IsXhr"},
     {"title": "BrookHTTPRequest.TBrookHTTPRequest.Headers", "text": " ", "tags": "", "loc": "BrookHTTPRequest.TBrookHTTPRequest.html#Headers"},
     {"title": "BrookHTTPRequest.TBrookHTTPRequest.Cookies", "text": " ", "tags": "", "loc": "BrookHTTPRequest.TBrookHTTPRequest.html#Cookies"},
     {"title": "BrookHTTPRequest.TBrookHTTPRequest.Params", "text": " ", "tags": "", "loc": "BrookHTTPRequest.TBrookHTTPRequest.html#Params"},
     {"title": "BrookHTTPRequest.TBrookHTTPRequest.Fields", "text": " ", "tags": "", "loc": "BrookHTTPRequest.TBrookHTTPRequest.html#Fields"},
     {"title": "BrookHTTPRequest.TBrookHTTPRequest.Payload", "text": " ", "tags": "", "loc": "BrookHTTPRequest.TBrookHTTPRequest.html#Payload"},
     {"title": "BrookHTTPRequest.TBrookHTTPRequest.Version", "text": " ", "tags": "", "loc": "BrookHTTPRequest.TBrookHTTPRequest.html#Version"},
     {"title": "BrookHTTPRequest.TBrookHTTPRequest.Method", "text": " ", "tags": "", "loc": "BrookHTTPRequest.TBrookHTTPRequest.html#Method"},
     {"title": "BrookHTTPRequest.TBrookHTTPRequest.Path", "text": " ", "tags": "", "loc": "BrookHTTPRequest.TBrookHTTPRequest.html#Path"},
     {"title": "BrookHTTPRequest.TBrookHTTPRequest.IP", "text": " ", "tags": "", "loc": "BrookHTTPRequest.TBrookHTTPRequest.html#IP"},
     {"title": "BrookHTTPRequest.TBrookHTTPRequest.ContentType", "text": " ", "tags": "", "loc": "BrookHTTPRequest.TBrookHTTPRequest.html#ContentType"},
     {"title": "BrookHTTPRequest.TBrookHTTPRequest.UserAgent", "text": " ", "tags": "", "loc": "BrookHTTPRequest.TBrookHTTPRequest.html#UserAgent"},
     {"title": "BrookHTTPRequest.TBrookHTTPRequest.Referer", "text": " ", "tags": "", "loc": "BrookHTTPRequest.TBrookHTTPRequest.html#Referer"},
     {"title": "BrookHTTPRequest.TBrookHTTPRequest.Paths", "text": " ", "tags": "", "loc": "BrookHTTPRequest.TBrookHTTPRequest.html#Paths"},
     {"title": "BrookHTTPRequest.TBrookHTTPRequest.IsUploading", "text": " ", "tags": "", "loc": "BrookHTTPRequest.TBrookHTTPRequest.html#IsUploading"},
     {"title": "BrookHTTPRequest.TBrookHTTPRequest.Uploads", "text": " ", "tags": "", "loc": "BrookHTTPRequest.TBrookHTTPRequest.html#Uploads"},
     {"title": "BrookHTTPRequest.TBrookHTTPRequest.Client", "text": " ", "tags": "", "loc": "BrookHTTPRequest.TBrookHTTPRequest.html#Client"},
     {"title": "BrookHTTPRequest.TBrookHTTPRequest.TLSSession", "text": " ", "tags": "", "loc": "BrookHTTPRequest.TBrookHTTPRequest.html#TLSSession"},
     {"title": "BrookHTTPRequest.TBrookHTTPRequest.UserData", "text": " ", "tags": "", "loc": "BrookHTTPRequest.TBrookHTTPRequest.html#UserData"},
     {"title": "BrookHTTPResponse", "text": " ", "tags": "", "loc": "BrookHTTPResponse.html"},
     {"title": "BrookHTTPResponse.EBrookHTTPResponse", "text": " ", "tags": "", "loc": "BrookHTTPResponse.EBrookHTTPResponse.html"},
     {"title": "BrookHTTPResponse.TBrookHTTPResponse", "text": " ", "tags": "", "loc": "BrookHTTPResponse.TBrookHTTPResponse.html"},
     {"title": "BrookHTTPResponse.TBrookHTTPResponse.Create", "text": "   AHandle[in] Request <a class=\"normal\" href=\"BrookHandledClasses.TBrookHandledPersistent.html#Handle\">handle</a>.  AHandle[in] Request <a class=\"normal\" href=\"BrookHandledClasses.TBrookHandledPersistent.html#Handle\">handle</a>.", "tags": "", "loc": "BrookHTTPResponse.TBrookHTTPResponse.html#Create"},
     {"title": "BrookHTTPResponse.TBrookHTTPResponse.Destroy", "text": "    ", "tags": "", "loc": "BrookHTTPResponse.TBrookHTTPResponse.html#Destroy"},
     {"title": "BrookHTTPResponse.TBrookHTTPResponse.SetCookie", "text": "    AName[in] Cookie name. AValue[in] Cookie value.  AName[in] Cookie name. AValue[in] Cookie value.", "tags": "", "loc": "BrookHTTPResponse.TBrookHTTPResponse.html#SetCookie"},
     {"title": "BrookHTTPResponse.TBrookHTTPResponse.Send", "text": "     AValue[in] String to be sent. AContentType[in] Content type. AStatus[in] HTTP status code.  AValue[in] String to be sent. AContentType[in] Content type. AStatus[in] HTTP status code.", "tags": "", "loc": "BrookHTTPResponse.TBrookHTTPResponse.html#Send"},
     {"title": "BrookHTTPResponse.TBrookHTTPResponse.SendFmt", "text": "      AFmt[in] Format string. AArgs[in] Arguments to compose the formatted string. AContentType[in] Content type. AStatus[in] HTTP status code.  AFmt[in] Format string. AArgs[in] Arguments to compose the formatted string. AContentType[in] Content type. AStatus[in] HTTP status code.", "tags": "", "loc": "BrookHTTPResponse.TBrookHTTPResponse.html#SendFmt"},
     {"title": "BrookHTTPResponse.TBrookHTTPResponse.SendBinary", "text": "      ABinary[in] Binary content to be sent. ASize[in] Content size. AContentType[in] Content type. AStatus[in] HTTP status code.  ABinary[in] Binary content to be sent. ASize[in] Content size. AContentType[in] Content type. AStatus[in] HTTP status code.", "tags": "", "loc": "BrookHTTPResponse.TBrookHTTPResponse.html#SendBinary"},
     {"title": "BrookHTTPResponse.TBrookHTTPResponse.SendBytes", "text": "      ABytes[in] Array of Bytes to be sent. ASize[in] Content size. AContentType[in] Content type. AStatus[in] HTTP status code.  ABytes[in] Array of Bytes to be sent. ASize[in] Content size. AContentType[in] Content type. AStatus[in] HTTP status code.", "tags": "", "loc": "BrookHTTPResponse.TBrookHTTPResponse.html#SendBytes"},
     {"title": "BrookHTTPResponse.TBrookHTTPResponse.SendFile", "text": "        ASize[in] Size of the file to be sent. Use zero to calculate automatically. AMaxSize[in] Maximum allowed file size. Use zero for no limit. AOffset[in] Offset to start reading from in the file to be sent. AFileName[in] Path of the file to be sent. ADownloaded[in] If <code>True</code> it offer the file as <a class=\"normal\" href=\"BrookHTTPResponse.TBrookHTTPResponse.html#Download\">download</a>. AStatus[in] HTTP status code.  ASize[in] Size of the file to be sent. Use zero to calculate automatically. AMaxSize[in] Maximum allowed file size. Use zero for no limit. AOffset[in] Offset to start reading from in the file to be sent. AFileName[in] Path of the file to be sent. ADownloaded[in] If <code>True</code> it offer the file as <a class=\"normal\" href=\"BrookHTTPResponse.TBrookHTTPResponse.html#Download\">download</a>. AStatus[in] HTTP status code.", "tags": "", "loc": "BrookHTTPResponse.TBrookHTTPResponse.html#SendFile"},
     {"title": "BrookHTTPResponse.TBrookHTTPResponse.SendStream", "text": "     AStream[in] Stream to be sent. AFreed[in] <code>True</code> frees the stream automatically as soon as it is sent. AStatus[in] HTTP status code.  AStream[in] Stream to be sent. AFreed[in] <code>True</code> frees the stream automatically as soon as it is sent. AStatus[in] HTTP status code.", "tags": "", "loc": "BrookHTTPResponse.TBrookHTTPResponse.html#SendStream"},
     {"title": "BrookHTTPResponse.TBrookHTTPResponse.SendStream", "text": " The stream is freed automatically as soon as it is sent.    AStream[in] Stream to be sent. AStatus[in] HTTP status code.  AStream[in] Stream to be sent. AStatus[in] HTTP status code.", "tags": "", "loc": "BrookHTTPResponse.TBrookHTTPResponse.html#SendStream"},
     {"title": "BrookHTTPResponse.TBrookHTTPResponse.SendEmpty", "text": "   AContentType[in] Content type.  AContentType[in] Content type.", "tags": "", "loc": "BrookHTTPResponse.TBrookHTTPResponse.html#SendEmpty"},
     {"title": "BrookHTTPResponse.TBrookHTTPResponse.SendEmpty", "text": "    ", "tags": "", "loc": "BrookHTTPResponse.TBrookHTTPResponse.html#SendEmpty"},
     {"title": "BrookHTTPResponse.TBrookHTTPResponse.SendAndRedirect", "text": "      AValue[in] String to be sent. ADestination[in] Destination to which it will be redirected as soon as the content is sent. AContentType[in] Content type. AStatus[in] HTTP status code (must be &gt;=300 and &lt;=307).  AValue[in] String to be sent. ADestination[in] Destination to which it will be redirected as soon as the content is sent. AContentType[in] Content type. AStatus[in] HTTP status code (must be &gt;=300 and &lt;=307).", "tags": "", "loc": "BrookHTTPResponse.TBrookHTTPResponse.html#SendAndRedirect"},
     {"title": "BrookHTTPResponse.TBrookHTTPResponse.SendAndRedirect", "text": "     AValue[in] String to be sent. ADestination[in] Destination to which it will be redirected as soon as the content is sent. AContentType[in] Content type.  AValue[in] String to be sent. ADestination[in] Destination to which it will be redirected as soon as the content is sent. AContentType[in] Content type.", "tags": "", "loc": "BrookHTTPResponse.TBrookHTTPResponse.html#SendAndRedirect"},
     {"title": "BrookHTTPResponse.TBrookHTTPResponse.Download", "text": "   AFileName[in] Path of the file to be sent.  AFileName[in] Path of the file to be sent.", "tags": "", "loc": "BrookHTTPResponse.TBrookHTTPResponse.html#Download"},
     {"title": "BrookHTTPResponse.TBrookHTTPResponse.Render", "text": "   AFileName[in] Path of the file to be sent.  AFileName[in] Path of the file to be sent.", "tags": "", "loc": "BrookHTTPResponse.TBrookHTTPResponse.html#Render"},
     {"title": "BrookHTTPResponse.TBrookHTTPResponse.Clear", "text": "    ", "tags": "", "loc": "BrookHTTPResponse.TBrookHTTPResponse.html#Clear"},
     {"title": "BrookHTTPResponse.TBrookHTTPResponse.Compressed", "text": " The compression is done by ZLib library using the DEFLATE compression algorithm. It uses the Gzip format when the content is a file. ", "tags": "", "loc": "BrookHTTPResponse.TBrookHTTPResponse.html#Compressed"},
     {"title": "BrookHTTPResponse.TBrookHTTPResponse.Headers", "text": " ", "tags": "", "loc": "BrookHTTPResponse.TBrookHTTPResponse.html#Headers"},
     {"title": "BrookHTTPResponse.TBrookHTTPResponse.Cookies", "text": " ", "tags": "", "loc": "BrookHTTPResponse.TBrookHTTPResponse.html#Cookies"},
     {"title": "BrookHTTPResponse.SBrookInvalidHTTPStatus", "text": " ", "tags": "", "loc": "BrookHTTPResponse.html#SBrookInvalidHTTPStatus"},
     {"title": "BrookHTTPResponse.SBrookResponseAlreadySent", "text": " ", "tags": "", "loc": "BrookHTTPResponse.html#SBrookResponseAlreadySent"},
     {"title": "BrookHTTPResponse.SBrookZLibError", "text": " ", "tags": "", "loc": "BrookHTTPResponse.html#SBrookZLibError"},
     {"title": "BrookHTTPServer", "text": " ", "tags": "", "loc": "BrookHTTPServer.html"},
     {"title": "BrookHTTPServer.EBrookHTTPServerSecurity", "text": " ", "tags": "", "loc": "BrookHTTPServer.EBrookHTTPServerSecurity.html"},
     {"title": "BrookHTTPServer.TBrookHTTPServerSecurity", "text": " ", "tags": "", "loc": "BrookHTTPServer.TBrookHTTPServerSecurity.html"},
     {"title": "BrookHTTPServer.TBrookHTTPServerSecurity.Assign", "text": "   ASource[in] Security source.  ASource[in] Security source.", "tags": "", "loc": "BrookHTTPServer.TBrookHTTPServerSecurity.html#Assign"},
     {"title": "BrookHTTPServer.TBrookHTTPServerSecurity.Clear", "text": "    ", "tags": "", "loc": "BrookHTTPServer.TBrookHTTPServerSecurity.html#Clear"},
     {"title": "BrookHTTPServer.TBrookHTTPServerSecurity.Validate", "text": "    ", "tags": "", "loc": "BrookHTTPServer.TBrookHTTPServerSecurity.html#Validate"},
     {"title": "BrookHTTPServer.TBrookHTTPServerSecurity.Active", "text": " ", "tags": "", "loc": "BrookHTTPServer.TBrookHTTPServerSecurity.html#Active"},
     {"title": "BrookHTTPServer.TBrookHTTPServerSecurity.PrivateKey", "text": " ", "tags": "", "loc": "BrookHTTPServer.TBrookHTTPServerSecurity.html#PrivateKey"},
     {"title": "BrookHTTPServer.TBrookHTTPServerSecurity.PrivatePassword", "text": " ", "tags": "", "loc": "BrookHTTPServer.TBrookHTTPServerSecurity.html#PrivatePassword"},
     {"title": "BrookHTTPServer.TBrookHTTPServerSecurity.Certificate", "text": " ", "tags": "", "loc": "BrookHTTPServer.TBrookHTTPServerSecurity.html#Certificate"},
     {"title": "BrookHTTPServer.TBrookHTTPServerSecurity.Trust", "text": " ", "tags": "", "loc": "BrookHTTPServer.TBrookHTTPServerSecurity.html#Trust"},
     {"title": "BrookHTTPServer.TBrookHTTPServerSecurity.DHParams", "text": " ", "tags": "", "loc": "BrookHTTPServer.TBrookHTTPServerSecurity.html#DHParams"},
     {"title": "BrookHTTPServer.EBrookHTTPServer", "text": " ", "tags": "", "loc": "BrookHTTPServer.EBrookHTTPServer.html"},
     {"title": "BrookHTTPServer.TBrookHTTPServer", "text": " ", "tags": "", "loc": "BrookHTTPServer.TBrookHTTPServer.html"},
     {"title": "BrookHTTPServer.TBrookHTTPServer.Create", "text": "   AOwner[in] Owner component.  AOwner[in] Owner component.", "tags": "", "loc": "BrookHTTPServer.TBrookHTTPServer.html#Create"},
     {"title": "BrookHTTPServer.TBrookHTTPServer.Destroy", "text": "    ", "tags": "", "loc": "BrookHTTPServer.TBrookHTTPServer.html#Destroy"},
     {"title": "BrookHTTPServer.TBrookHTTPServer.Open", "text": "    ", "tags": "", "loc": "BrookHTTPServer.TBrookHTTPServer.html#Open"},
     {"title": "BrookHTTPServer.TBrookHTTPServer.Close", "text": "    ", "tags": "", "loc": "BrookHTTPServer.TBrookHTTPServer.html#Close"},
     {"title": "BrookHTTPServer.TBrookHTTPServer.Active", "text": " ", "tags": "", "loc": "BrookHTTPServer.TBrookHTTPServer.html#Active"},
     {"title": "BrookHTTPServer.TBrookHTTPServer.Authenticated", "text": " ", "tags": "", "loc": "BrookHTTPServer.TBrookHTTPServer.html#Authenticated"},
     {"title": "BrookHTTPServer.TBrookHTTPServer.Port", "text": " ", "tags": "", "loc": "BrookHTTPServer.TBrookHTTPServer.html#Port"},
     {"title": "BrookHTTPServer.TBrookHTTPServer.Threaded", "text": " If <code>True</code>, the server creates one thread per connection. ", "tags": "", "loc": "BrookHTTPServer.TBrookHTTPServer.html#Threaded"},
     {"title": "BrookHTTPServer.TBrookHTTPServer.UploadsDir", "text": " ", "tags": "", "loc": "BrookHTTPServer.TBrookHTTPServer.html#UploadsDir"},
     {"title": "BrookHTTPServer.TBrookHTTPServer.PostBufferSize", "text": " ", "tags": "", "loc": "BrookHTTPServer.TBrookHTTPServer.html#PostBufferSize"},
     {"title": "BrookHTTPServer.TBrookHTTPServer.PayloadLimit", "text": " Use zero for no limit. ", "tags": "", "loc": "BrookHTTPServer.TBrookHTTPServer.html#PayloadLimit"},
     {"title": "BrookHTTPServer.TBrookHTTPServer.UploadsLimit", "text": " Use zero for no limit. ", "tags": "", "loc": "BrookHTTPServer.TBrookHTTPServer.html#UploadsLimit"},
     {"title": "BrookHTTPServer.TBrookHTTPServer.ThreadPoolSize", "text": " Size greater than 1 enables the thread pooling. ", "tags": "", "loc": "BrookHTTPServer.TBrookHTTPServer.html#ThreadPoolSize"},
     {"title": "BrookHTTPServer.TBrookHTTPServer.ConnectionTimeout", "text": " ", "tags": "", "loc": "BrookHTTPServer.TBrookHTTPServer.html#ConnectionTimeout"},
     {"title": "BrookHTTPServer.TBrookHTTPServer.ConnectionLimit", "text": " Use zero for no limit. ", "tags": "", "loc": "BrookHTTPServer.TBrookHTTPServer.html#ConnectionLimit"},
     {"title": "BrookHTTPServer.TBrookHTTPServer.NoFavicon", "text": " If <code>True</code>, it avoids <code>404</code> errors by sending an empty content (<code>204</code>) if path is <code>'/favicon.ico'</code>. ", "tags": "", "loc": "BrookHTTPServer.TBrookHTTPServer.html#NoFavicon"},
     {"title": "BrookHTTPServer.TBrookHTTPServer.Security", "text": " ", "tags": "", "loc": "BrookHTTPServer.TBrookHTTPServer.html#Security"},
     {"title": "BrookHTTPServer.TBrookHTTPServer.OnAuthenticate", "text": " ", "tags": "", "loc": "BrookHTTPServer.TBrookHTTPServer.html#OnAuthenticate"},
     {"title": "BrookHTTPServer.TBrookHTTPServer.OnAuthenticateError", "text": " ", "tags": "", "loc": "BrookHTTPServer.TBrookHTTPServer.html#OnAuthenticateError"},
     {"title": "BrookHTTPServer.TBrookHTTPServer.OnRequest", "text": " ", "tags": "", "loc": "BrookHTTPServer.TBrookHTTPServer.html#OnRequest"},
     {"title": "BrookHTTPServer.TBrookHTTPServer.OnRequestError", "text": " ", "tags": "", "loc": "BrookHTTPServer.TBrookHTTPServer.html#OnRequestError"},
     {"title": "BrookHTTPServer.TBrookHTTPServer.OnClientConnection", "text": " ", "tags": "", "loc": "BrookHTTPServer.TBrookHTTPServer.html#OnClientConnection"},
     {"title": "BrookHTTPServer.TBrookHTTPServer.OnError", "text": " ", "tags": "", "loc": "BrookHTTPServer.TBrookHTTPServer.html#OnError"},
     {"title": "BrookHTTPServer.TBrookHTTPServer.OnStart", "text": " ", "tags": "", "loc": "BrookHTTPServer.TBrookHTTPServer.html#OnStart"},
     {"title": "BrookHTTPServer.TBrookHTTPServer.OnStop", "text": " ", "tags": "", "loc": "BrookHTTPServer.TBrookHTTPServer.html#OnStop"},
     {"title": "BrookHTTPServer.SBrookActiveServer", "text": " ", "tags": "", "loc": "BrookHTTPServer.html#SBrookActiveServer"},
     {"title": "BrookHTTPServer.SBrookCannotCreateServerHandle", "text": " ", "tags": "", "loc": "BrookHTTPServer.html#SBrookCannotCreateServerHandle"},
     {"title": "BrookHTTPServer.SBrookTLSNotAvailable", "text": " ", "tags": "", "loc": "BrookHTTPServer.html#SBrookTLSNotAvailable"},
     {"title": "BrookHTTPServer.SBrookEmptyPrivateKey", "text": " ", "tags": "", "loc": "BrookHTTPServer.html#SBrookEmptyPrivateKey"},
     {"title": "BrookHTTPServer.SBrookEmptyCertificate", "text": " ", "tags": "", "loc": "BrookHTTPServer.html#SBrookEmptyCertificate"},
     {"title": "BrookHTTPServer.TBrookHTTPAuthenticateEvent", "text": "    ", "tags": "", "loc": "BrookHTTPServer.html#TBrookHTTPAuthenticateEvent"},
     {"title": "BrookHTTPServer.TBrookHTTPAuthenticateErrorEvent", "text": "    ", "tags": "", "loc": "BrookHTTPServer.html#TBrookHTTPAuthenticateErrorEvent"},
     {"title": "BrookHTTPServer.TBrookHTTPRequestEvent", "text": "    ", "tags": "", "loc": "BrookHTTPServer.html#TBrookHTTPRequestEvent"},
     {"title": "BrookHTTPServer.TBrookHTTPRequestErrorEvent", "text": "    ", "tags": "", "loc": "BrookHTTPServer.html#TBrookHTTPRequestErrorEvent"},
     {"title": "BrookHTTPServer.TBrookHTTPServerClientConnectionEvent", "text": "    ", "tags": "", "loc": "BrookHTTPServer.html#TBrookHTTPServerClientConnectionEvent"},
     {"title": "BrookHTTPUploads", "text": " ", "tags": "", "loc": "BrookHTTPUploads.html"},
     {"title": "BrookHTTPUploads.TBrookHTTPUpload", "text": " ", "tags": "", "loc": "BrookHTTPUploads.TBrookHTTPUpload.html"},
     {"title": "BrookHTTPUploads.TBrookHTTPUpload.Create", "text": "   AHandle[in] Upload <a class=\"normal\" href=\"BrookHTTPUploads.TBrookHTTPUpload.html#Handle\">handle</a>.  AHandle[in] Upload <a class=\"normal\" href=\"BrookHTTPUploads.TBrookHTTPUpload.html#Handle\">handle</a>.", "tags": "", "loc": "BrookHTTPUploads.TBrookHTTPUpload.html#Create"},
     {"title": "BrookHTTPUploads.TBrookHTTPUpload.Save", "text": "     AOverwritten[in] Overwrite upload file if it exists. AError[out] Variable reference to store string describing the error if <a class=\"normal\" href=\"BrookHTTPUploads.TBrookHTTPUpload.html#Save\">save</a> fails. <code>True</code> if the uploaded file is saved successfully. AOverwritten[in] Overwrite upload file if it exists. AError[out] Variable reference to store string describing the error if <a class=\"normal\" href=\"BrookHTTPUploads.TBrookHTTPUpload.html#Save\">save</a> fails.", "tags": "", "loc": "BrookHTTPUploads.TBrookHTTPUpload.html#Save"},
     {"title": "BrookHTTPUploads.TBrookHTTPUpload.Save", "text": "    AError[out] Variable reference to store string describing the error if <a class=\"normal\" href=\"BrookHTTPUploads.TBrookHTTPUpload.html#Save\">save</a> fails. <code>True</code> if the uploaded file is saved successfully. AError[out] Variable reference to store string describing the error if <a class=\"normal\" href=\"BrookHTTPUploads.TBrookHTTPUpload.html#Save\">save</a> fails.", "tags": "", "loc": "BrookHTTPUploads.TBrookHTTPUpload.html#Save"},
     {"title": "BrookHTTPUploads.TBrookHTTPUpload.Save", "text": "   AOverwritten[in] Overwrite upload file if it exists.  AOverwritten[in] Overwrite upload file if it exists.", "tags": "", "loc": "BrookHTTPUploads.TBrookHTTPUpload.html#Save"},
     {"title": "BrookHTTPUploads.TBrookHTTPUpload.Save", "text": "    ", "tags": "", "loc": "BrookHTTPUploads.TBrookHTTPUpload.html#Save"},
     {"title": "BrookHTTPUploads.TBrookHTTPUpload.SaveAs", "text": "      APath[in] Absolute destination path. AOverwritten[in] Overwrite upload file if it exists. AError[out] Variable reference to store string describing the error if <a class=\"normal\" href=\"BrookHTTPUploads.TBrookHTTPUpload.html#Save\">save</a> fails. <code>True</code> if the uploaded file is saved successfully. APath[in] Absolute destination path. AOverwritten[in] Overwrite upload file if it exists. AError[out] Variable reference to store string describing the error if <a class=\"normal\" href=\"BrookHTTPUploads.TBrookHTTPUpload.html#Save\">save</a> fails.", "tags": "", "loc": "BrookHTTPUploads.TBrookHTTPUpload.html#SaveAs"},
     {"title": "BrookHTTPUploads.TBrookHTTPUpload.SaveAs", "text": "     APath[in] Absolute destination path. AError[out] Variable reference to store string describing the error if <a class=\"normal\" href=\"BrookHTTPUploads.TBrookHTTPUpload.html#Save\">save</a> fails. <code>True</code> if the uploaded file is saved successfully. APath[in] Absolute destination path. AError[out] Variable reference to store string describing the error if <a class=\"normal\" href=\"BrookHTTPUploads.TBrookHTTPUpload.html#Save\">save</a> fails.", "tags": "", "loc": "BrookHTTPUploads.TBrookHTTPUpload.html#SaveAs"},
     {"title": "BrookHTTPUploads.TBrookHTTPUpload.SaveAs", "text": "    APath[in] Absolute destination path. AOverwritten[in] Overwrite upload file if it exists.  APath[in] Absolute destination path. AOverwritten[in] Overwrite upload file if it exists.", "tags": "", "loc": "BrookHTTPUploads.TBrookHTTPUpload.html#SaveAs"},
     {"title": "BrookHTTPUploads.TBrookHTTPUpload.SaveAs", "text": "   APath[in] Absolute destination path.  APath[in] Absolute destination path.", "tags": "", "loc": "BrookHTTPUploads.TBrookHTTPUpload.html#SaveAs"},
     {"title": "BrookHTTPUploads.TBrookHTTPUpload.Handle", "text": " ", "tags": "", "loc": "BrookHTTPUploads.TBrookHTTPUpload.html#Handle"},
     {"title": "BrookHTTPUploads.TBrookHTTPUpload.StreamHandle", "text": " ", "tags": "", "loc": "BrookHTTPUploads.TBrookHTTPUpload.html#StreamHandle"},
     {"title": "BrookHTTPUploads.TBrookHTTPUpload.Directory", "text": " ", "tags": "", "loc": "BrookHTTPUploads.TBrookHTTPUpload.html#Directory"},
     {"title": "BrookHTTPUploads.TBrookHTTPUpload.Field", "text": " ", "tags": "", "loc": "BrookHTTPUploads.TBrookHTTPUpload.html#Field"},
     {"title": "BrookHTTPUploads.TBrookHTTPUpload.Name", "text": " ", "tags": "", "loc": "BrookHTTPUploads.TBrookHTTPUpload.html#Name"},
     {"title": "BrookHTTPUploads.TBrookHTTPUpload.Mime", "text": " ", "tags": "", "loc": "BrookHTTPUploads.TBrookHTTPUpload.html#Mime"},
     {"title": "BrookHTTPUploads.TBrookHTTPUpload.Encoding", "text": " ", "tags": "", "loc": "BrookHTTPUploads.TBrookHTTPUpload.html#Encoding"},
     {"title": "BrookHTTPUploads.TBrookHTTPUpload.Size", "text": " ", "tags": "", "loc": "BrookHTTPUploads.TBrookHTTPUpload.html#Size"},
     {"title": "BrookHTTPUploads.TBrookHTTPUploadsEnumerator", "text": " ", "tags": "", "loc": "BrookHTTPUploads.TBrookHTTPUploadsEnumerator.html"},
     {"title": "BrookHTTPUploads.TBrookHTTPUploadsEnumerator.Create", "text": "   AUploads[in] Uploads list.  AUploads[in] Uploads list.", "tags": "", "loc": "BrookHTTPUploads.TBrookHTTPUploadsEnumerator.html#Create"},
     {"title": "BrookHTTPUploads.TBrookHTTPUploadsEnumerator.GetCurrent", "text": "    <a class=\"normal\" href=\"BrookHTTPUploads.TBrookHTTPUploadsEnumerator.html#Current\">Current</a> upload. ", "tags": "", "loc": "BrookHTTPUploads.TBrookHTTPUploadsEnumerator.html#GetCurrent"},
     {"title": "BrookHTTPUploads.TBrookHTTPUploadsEnumerator.MoveNext", "text": "    <code>True</code> when move next reaches the EOF. ", "tags": "", "loc": "BrookHTTPUploads.TBrookHTTPUploadsEnumerator.html#MoveNext"},
     {"title": "BrookHTTPUploads.TBrookHTTPUploadsEnumerator.Current", "text": " ", "tags": "", "loc": "BrookHTTPUploads.TBrookHTTPUploadsEnumerator.html#Current"},
     {"title": "BrookHTTPUploads.TBrookHTTPUploads", "text": " ", "tags": "", "loc": "BrookHTTPUploads.TBrookHTTPUploads.html"},
     {"title": "BrookHTTPUploads.TBrookHTTPUploads.Create", "text": "   AHandle[in] Uploads <a class=\"normal\" href=\"BrookHandledClasses.TBrookHandledPersistent.html#Handle\">handle</a>.  AHandle[in] Uploads <a class=\"normal\" href=\"BrookHandledClasses.TBrookHandledPersistent.html#Handle\">handle</a>.", "tags": "", "loc": "BrookHTTPUploads.TBrookHTTPUploads.html#Create"},
     {"title": "BrookHTTPUploads.TBrookHTTPUploads.GetEnumerator", "text": "    ", "tags": "", "loc": "BrookHTTPUploads.TBrookHTTPUploads.html#GetEnumerator"},
     {"title": "BrookHTTPUploads.TBrookHTTPUploads.First", "text": "    AUpload[out] <code>First</code> upload returned. <code>True</code> when upload is found, <code>False</code> otherwise. AUpload[out] <code>First</code> upload returned.", "tags": "", "loc": "BrookHTTPUploads.TBrookHTTPUploads.html#First"},
     {"title": "BrookHTTPUploads.TBrookHTTPUploads.Next", "text": "   AUpload[out] <code>Next</code> upload returned.  AUpload[out] <code>Next</code> upload returned.", "tags": "", "loc": "BrookHTTPUploads.TBrookHTTPUploads.html#Next"},
     {"title": "BrookHTTPUploads.TBrookHTTPUploads.EOF", "text": " ", "tags": "", "loc": "BrookHTTPUploads.TBrookHTTPUploads.html#EOF"},
     {"title": "BrookHTTPUploads.TBrookHTTPUploads.Count", "text": " ", "tags": "", "loc": "BrookHTTPUploads.TBrookHTTPUploads.html#Count"},
     {"title": "BrookLibraryLoader", "text": " ", "tags": "", "loc": "BrookLibraryLoader.html"},
     {"title": "BrookLibraryLoader.TBrookLibraryLoader", "text": " ", "tags": "", "loc": "BrookLibraryLoader.TBrookLibraryLoader.html"},
     {"title": "BrookLibraryLoader.TBrookLibraryLoader.LIB_NAME", "text": " ", "tags": "", "loc": "BrookLibraryLoader.TBrookLibraryLoader.html#LIB_NAME"},
     {"title": "BrookLibraryLoader.TBrookLibraryLoader.Create", "text": "   AOwner[in] Owner component.  AOwner[in] Owner component.", "tags": "", "loc": "BrookLibraryLoader.TBrookLibraryLoader.html#Create"},
     {"title": "BrookLibraryLoader.TBrookLibraryLoader.Destroy", "text": "    ", "tags": "", "loc": "BrookLibraryLoader.TBrookLibraryLoader.html#Destroy"},
     {"title": "BrookLibraryLoader.TBrookLibraryLoader.Load", "text": "   ALibraryName Library name.  ALibraryName Library name.", "tags": "", "loc": "BrookLibraryLoader.TBrookLibraryLoader.html#Load"},
     {"title": "BrookLibraryLoader.TBrookLibraryLoader.Load", "text": "    ", "tags": "", "loc": "BrookLibraryLoader.TBrookLibraryLoader.html#Load"},
     {"title": "BrookLibraryLoader.TBrookLibraryLoader.Unload", "text": "    ", "tags": "", "loc": "BrookLibraryLoader.TBrookLibraryLoader.html#Unload"},
     {"title": "BrookLibraryLoader.TBrookLibraryLoader.Open", "text": "    ", "tags": "", "loc": "BrookLibraryLoader.TBrookLibraryLoader.html#Open"},
     {"title": "BrookLibraryLoader.TBrookLibraryLoader.Close", "text": "    ", "tags": "", "loc": "BrookLibraryLoader.TBrookLibraryLoader.html#Close"},
     {"title": "BrookLibraryLoader.TBrookLibraryLoader.Active", "text": " ", "tags": "", "loc": "BrookLibraryLoader.TBrookLibraryLoader.html#Active"},
     {"title": "BrookLibraryLoader.TBrookLibraryLoader.LibraryName", "text": " ", "tags": "", "loc": "BrookLibraryLoader.TBrookLibraryLoader.html#LibraryName"},
     {"title": "BrookLibraryLoader.TBrookLibraryLoader.Version", "text": " ", "tags": "", "loc": "BrookLibraryLoader.TBrookLibraryLoader.html#Version"},
     {"title": "BrookLibraryLoader.TBrookLibraryLoader.OnLoad", "text": " ", "tags": "", "loc": "BrookLibraryLoader.TBrookLibraryLoader.html#OnLoad"},
     {"title": "BrookLibraryLoader.TBrookLibraryLoader.OnUnload", "text": " ", "tags": "", "loc": "BrookLibraryLoader.TBrookLibraryLoader.html#OnUnload"},
     {"title": "BrookLibraryLoader.SBrookActiveLibLoader", "text": " ", "tags": "", "loc": "BrookLibraryLoader.html#SBrookActiveLibLoader"},
     {"title": "BrookLibraryLoader.SBrookLibraryAlreadyLoaded", "text": " ", "tags": "", "loc": "BrookLibraryLoader.html#SBrookLibraryAlreadyLoaded"},
     {"title": "BrookMediaTypes", "text": " ", "tags": "", "loc": "BrookMediaTypes.html"},
     {"title": "BrookMediaTypes.EBrookMediaTypes", "text": " ", "tags": "", "loc": "BrookMediaTypes.EBrookMediaTypes.html"},
     {"title": "BrookMediaTypes.TBrookMediaTypes", "text": " ", "tags": "", "loc": "BrookMediaTypes.TBrookMediaTypes.html"},
     {"title": "BrookMediaTypes.TBrookMediaTypes.Create", "text": "    ", "tags": "", "loc": "BrookMediaTypes.TBrookMediaTypes.html#Create"},
     {"title": "BrookMediaTypes.TBrookMediaTypes.Destroy", "text": "    ", "tags": "", "loc": "BrookMediaTypes.TBrookMediaTypes.html#Destroy"},
     {"title": "BrookMediaTypes.TBrookMediaTypes.GetRegisterAlias", "text": "    Registration alias name. ", "tags": "", "loc": "BrookMediaTypes.TBrookMediaTypes.html#GetRegisterAlias"},
     {"title": "BrookMediaTypes.TBrookMediaTypes.GetDescription", "text": "    Description of the media types source. ", "tags": "", "loc": "BrookMediaTypes.TBrookMediaTypes.html#GetDescription"},
     {"title": "BrookMediaTypes.TBrookMediaTypes.IsValid", "text": "    AType[in] Media type identifier. <code>True</code> if a string represents a media type. AType[in] Media type identifier.", "tags": "", "loc": "BrookMediaTypes.TBrookMediaTypes.html#IsValid"},
     {"title": "BrookMediaTypes.TBrookMediaTypes.IsText", "text": " <code>'text/plain'</code>.    AType[in] Media type identifier. <code>True</code> if a string represents a text media type. AType[in] Media type identifier.", "tags": "", "loc": "BrookMediaTypes.TBrookMediaTypes.html#IsText"},
     {"title": "BrookMediaTypes.TBrookMediaTypes.IsExt", "text": " <code>'text/plain'</code>.    AExt[in] File extension. <code>True</code> if a string represents a file extension. AExt[in] File extension.", "tags": "", "loc": "BrookMediaTypes.TBrookMediaTypes.html#IsExt"},
     {"title": "BrookMediaTypes.TBrookMediaTypes.NormalizeExt", "text": " a <code>'pas'</code> will be normalized to <code>'.pas'</code>.    AExt[in] File extension. Normalized file extension. AExt[in] File extension.", "tags": "", "loc": "BrookMediaTypes.TBrookMediaTypes.html#NormalizeExt"},
     {"title": "BrookMediaTypes.TBrookMediaTypes.Prepare", "text": "    ", "tags": "", "loc": "BrookMediaTypes.TBrookMediaTypes.html#Prepare"},
     {"title": "BrookMediaTypes.TBrookMediaTypes.Add", "text": "    AExt[in] File extension. AType[in] Media type identifier.  AExt[in] File extension. AType[in] Media type identifier.", "tags": "", "loc": "BrookMediaTypes.TBrookMediaTypes.html#Add"},
     {"title": "BrookMediaTypes.TBrookMediaTypes.Remove", "text": "   AExt[in] File extension.  AExt[in] File extension.", "tags": "", "loc": "BrookMediaTypes.TBrookMediaTypes.html#Remove"},
     {"title": "BrookMediaTypes.TBrookMediaTypes.TryType", "text": "     AExt[in] File extension. AType[in] Media type identifier. <code>True</code> if the media type identifier is found. AExt[in] File extension. AType[in] Media type identifier.", "tags": "", "loc": "BrookMediaTypes.TBrookMediaTypes.html#TryType"},
     {"title": "BrookMediaTypes.TBrookMediaTypes.Find", "text": " If the cache is not <a class=\"normal\" href=\"BrookMediaTypes.TBrookMediaTypes.html#Prepared\">prepared</a> yet, this method prepares it automatically. If a media type identifier is not found, the <code>ADefType</code> is returned instead.     AExt[in] File extension. ADefType[in] Default media type identifier. Media type identifier. AExt[in] File extension. ADefType[in] Default media type identifier.", "tags": "", "loc": "BrookMediaTypes.TBrookMediaTypes.html#Find"},
     {"title": "BrookMediaTypes.TBrookMediaTypes.Find", "text": " If the cache is not <a class=\"normal\" href=\"BrookMediaTypes.TBrookMediaTypes.html#Prepared\">prepared</a> yet, this method prepares it automatically. If a media type identifier is not found, the <code><a class=\"normal\" href=\"BrookMediaTypes.TBrookMediaTypes.html#DefaultType\">DefaultType</a></code> is returned instead.    AExt[in] File extension. Media type identifier. AExt[in] File extension.", "tags": "", "loc": "BrookMediaTypes.TBrookMediaTypes.html#Find"},
     {"title": "BrookMediaTypes.TBrookMediaTypes.Count", "text": "    All media type identifiers present in the cache. ", "tags": "", "loc": "BrookMediaTypes.TBrookMediaTypes.html#Count"},
     {"title": "BrookMediaTypes.TBrookMediaTypes.Clear", "text": "    ", "tags": "", "loc": "BrookMediaTypes.TBrookMediaTypes.html#Clear"},
     {"title": "BrookMediaTypes.TBrookMediaTypes.DefaultType", "text": " ", "tags": "", "loc": "BrookMediaTypes.TBrookMediaTypes.html#DefaultType"},
     {"title": "BrookMediaTypes.TBrookMediaTypes.Prepared", "text": " ", "tags": "", "loc": "BrookMediaTypes.TBrookMediaTypes.html#Prepared"},
     {"title": "BrookMediaTypes.TBrookMediaTypesParser", "text": " ", "tags": "", "loc": "BrookMediaTypes.TBrookMediaTypesParser.html"},
     {"title": "BrookMediaTypes.TBrookMediaTypesParser.Create", "text": "    ", "tags": "", "loc": "BrookMediaTypes.TBrookMediaTypesParser.html#Create"},
     {"title": "BrookMediaTypes.TBrookMediaTypesParser.Parse", "text": "    ", "tags": "", "loc": "BrookMediaTypes.TBrookMediaTypesParser.html#Parse"},
     {"title": "BrookMediaTypes.TBrookMediaTypesParser.Reader", "text": " ", "tags": "", "loc": "BrookMediaTypes.TBrookMediaTypesParser.html#Reader"},
     {"title": "BrookMediaTypes.TBrookMediaTypesParser.Types", "text": " ", "tags": "", "loc": "BrookMediaTypes.TBrookMediaTypesParser.html#Types"},
     {"title": "BrookMediaTypes.TBrookMediaTypesParserNginx", "text": " ", "tags": "", "loc": "BrookMediaTypes.TBrookMediaTypesParserNginx.html"},
     {"title": "BrookMediaTypes.TBrookMediaTypesParserNginx.Parse", "text": "    ", "tags": "", "loc": "BrookMediaTypes.TBrookMediaTypesParserNginx.html#Parse"},
     {"title": "BrookMediaTypes.TBrookMediaTypesPath", "text": " ", "tags": "", "loc": "BrookMediaTypes.TBrookMediaTypesPath.html"},
     {"title": "BrookMediaTypes.TBrookMediaTypesPath.Create", "text": "   AFileName[in] Media types file.  AFileName[in] Media types file.", "tags": "", "loc": "BrookMediaTypes.TBrookMediaTypesPath.html#Create"},
     {"title": "BrookMediaTypes.TBrookMediaTypesPath.Create", "text": "    ", "tags": "", "loc": "BrookMediaTypes.TBrookMediaTypesPath.html#Create"},
     {"title": "BrookMediaTypes.TBrookMediaTypesPath.Destroy", "text": "    ", "tags": "", "loc": "BrookMediaTypes.TBrookMediaTypesPath.html#Destroy"},
     {"title": "BrookMediaTypes.TBrookMediaTypesPath.GetDescription", "text": "    Description of the media types source. ", "tags": "", "loc": "BrookMediaTypes.TBrookMediaTypesPath.html#GetDescription"},
     {"title": "BrookMediaTypes.TBrookMediaTypesPath.GetFileName", "text": "    File name of the media types source. ", "tags": "", "loc": "BrookMediaTypes.TBrookMediaTypesPath.html#GetFileName"},
     {"title": "BrookMediaTypes.TBrookMediaTypesPath.Prepare", "text": "    ", "tags": "", "loc": "BrookMediaTypes.TBrookMediaTypesPath.html#Prepare"},
     {"title": "BrookMediaTypes.TBrookMediaTypesPath.Clear", "text": "    ", "tags": "", "loc": "BrookMediaTypes.TBrookMediaTypesPath.html#Clear"},
     {"title": "BrookMediaTypes.TBrookMediaTypesPath.Reader", "text": " ", "tags": "", "loc": "BrookMediaTypes.TBrookMediaTypesPath.html#Reader"},
     {"title": "BrookMediaTypes.TBrookMediaTypesPath.Parser", "text": " ", "tags": "", "loc": "BrookMediaTypes.TBrookMediaTypesPath.html#Parser"},
     {"title": "BrookMediaTypes.TBrookMediaTypesPath.FileName", "text": " ", "tags": "", "loc": "BrookMediaTypes.TBrookMediaTypesPath.html#FileName"},
     {"title": "BrookMediaTypes.TBrookMediaTypesApache", "text": " ", "tags": "", "loc": "BrookMediaTypes.TBrookMediaTypesApache.html"},
     {"title": "BrookMediaTypes.TBrookMediaTypesApache.GetDescription", "text": "    Description of the media types source. ", "tags": "", "loc": "BrookMediaTypes.TBrookMediaTypesApache.html#GetDescription"},
     {"title": "BrookMediaTypes.TBrookMediaTypesNginx", "text": " ", "tags": "", "loc": "BrookMediaTypes.TBrookMediaTypesNginx.html"},
     {"title": "BrookMediaTypes.TBrookMediaTypesNginx.GetDescription", "text": "    Description of the media types source. ", "tags": "", "loc": "BrookMediaTypes.TBrookMediaTypesNginx.html#GetDescription"},
     {"title": "BrookMediaTypes.TBrookMediaTypesNginx.GetFileName", "text": "    File name of the media types source. ", "tags": "", "loc": "BrookMediaTypes.TBrookMediaTypesNginx.html#GetFileName"},
     {"title": "BrookMediaTypes.TBrookMediaTypesWindows", "text": " ", "tags": "", "loc": "BrookMediaTypes.TBrookMediaTypesWindows.html"},
     {"title": "BrookMediaTypes.TBrookMediaTypesWindows.GetDescription", "text": "    Description of the media types source. ", "tags": "", "loc": "BrookMediaTypes.TBrookMediaTypesWindows.html#GetDescription"},
     {"title": "BrookMediaTypes.TBrookMediaTypesUnix", "text": " ", "tags": "", "loc": "BrookMediaTypes.TBrookMediaTypesUnix.html"},
     {"title": "BrookMediaTypes.TBrookMediaTypesUnix.GetDescription", "text": "    Description of the media types source. ", "tags": "", "loc": "BrookMediaTypes.TBrookMediaTypesUnix.html#GetDescription"},
     {"title": "BrookMediaTypes.TBrookMediaTypesUnix.GetFileName", "text": "    File name of the media types source. ", "tags": "", "loc": "BrookMediaTypes.TBrookMediaTypesUnix.html#GetFileName"},
     {"title": "BrookMediaTypes.TBrookMIME", "text": " ", "tags": "", "loc": "BrookMediaTypes.TBrookMIME.html"},
     {"title": "BrookMediaTypes.TBrookMIME.Create", "text": "   AOwner[in] Owner component.  AOwner[in] Owner component.", "tags": "", "loc": "BrookMediaTypes.TBrookMIME.html#Create"},
     {"title": "BrookMediaTypes.TBrookMIME.Destroy", "text": "    ", "tags": "", "loc": "BrookMediaTypes.TBrookMIME.html#Destroy"},
     {"title": "BrookMediaTypes.TBrookMIME.GetProviderClass", "text": "    ", "tags": "", "loc": "BrookMediaTypes.TBrookMIME.html#GetProviderClass"},
     {"title": "BrookMediaTypes.TBrookMIME.Open", "text": "    ", "tags": "", "loc": "BrookMediaTypes.TBrookMIME.html#Open"},
     {"title": "BrookMediaTypes.TBrookMIME.Close", "text": "    ", "tags": "", "loc": "BrookMediaTypes.TBrookMIME.html#Close"},
     {"title": "BrookMediaTypes.TBrookMIME.Types", "text": " ", "tags": "", "loc": "BrookMediaTypes.TBrookMIME.html#Types"},
     {"title": "BrookMediaTypes.TBrookMIME.Active", "text": " ", "tags": "", "loc": "BrookMediaTypes.TBrookMIME.html#Active"},
     {"title": "BrookMediaTypes.TBrookMIME.DefaultType", "text": " ", "tags": "", "loc": "BrookMediaTypes.TBrookMIME.html#DefaultType"},
     {"title": "BrookMediaTypes.TBrookMIME.FileName", "text": " ", "tags": "", "loc": "BrookMediaTypes.TBrookMIME.html#FileName"},
     {"title": "BrookMediaTypes.TBrookMIME.Provider", "text": " ", "tags": "", "loc": "BrookMediaTypes.TBrookMIME.html#Provider"},
     {"title": "BrookMediaTypes.BROOK_MIME_FILE", "text": " ", "tags": "", "loc": "BrookMediaTypes.html#BROOK_MIME_FILE"},
     {"title": "BrookMediaTypes.BROOK_MIME_TAG", "text": " ", "tags": "", "loc": "BrookMediaTypes.html#BROOK_MIME_TAG"},
     {"title": "BrookMediaTypes.BROOK_MIME_PROVIDER", "text": " ", "tags": "", "loc": "BrookMediaTypes.html#BROOK_MIME_PROVIDER"},
     {"title": "BrookMediaTypes.SBrookInvalidMediaType", "text": " ", "tags": "", "loc": "BrookMediaTypes.html#SBrookInvalidMediaType"},
     {"title": "BrookMediaTypes.SBrookInvalidMediaExt", "text": " ", "tags": "", "loc": "BrookMediaTypes.html#SBrookInvalidMediaExt"},
     {"title": "BrookMediaTypes.SBrookEmptyMediaType", "text": " ", "tags": "", "loc": "BrookMediaTypes.html#SBrookEmptyMediaType"},
     {"title": "BrookMediaTypes.SBrookEmptyMediaExt", "text": " ", "tags": "", "loc": "BrookMediaTypes.html#SBrookEmptyMediaExt"},
     {"title": "BrookMediaTypes.SBrookActiveMIMETypes", "text": " ", "tags": "", "loc": "BrookMediaTypes.html#SBrookActiveMIMETypes"},
     {"title": "BrookMediaTypes.SBrookInactiveMIMETypes", "text": " ", "tags": "", "loc": "BrookMediaTypes.html#SBrookInactiveMIMETypes"},
     {"title": "BrookMediaTypes.SBrookEmptyMIMEProvider", "text": " ", "tags": "", "loc": "BrookMediaTypes.html#SBrookEmptyMIMEProvider"},
     {"title": "BrookMediaTypes.SBrookInvalidMIMEProviderClass", "text": " ", "tags": "", "loc": "BrookMediaTypes.html#SBrookInvalidMIMEProviderClass"},
     {"title": "BrookMediaTypes.SBrookUnknownMIMEProvider", "text": " ", "tags": "", "loc": "BrookMediaTypes.html#SBrookUnknownMIMEProvider"},
     {"title": "BrookMediaTypes.TBrookMediaTypesClass", "text": " ", "tags": "", "loc": "BrookMediaTypes.html#TBrookMediaTypesClass"},
     {"title": "BrookMediaTypes.TBrookMediaTypesPathClass", "text": " ", "tags": "", "loc": "BrookMediaTypes.html#TBrookMediaTypesPathClass"},
     {"title": "BrookReader", "text": " ", "tags": "", "loc": "BrookReader.html"},
     {"title": "BrookReader.TBrookTextReader", "text": " ", "tags": "", "loc": "BrookReader.TBrookTextReader.html"},
     {"title": "BrookReader.TBrookTextReader.Reset", "text": "    ", "tags": "", "loc": "BrookReader.TBrookTextReader.html#Reset"},
     {"title": "BrookReader.TBrookTextReader.Close", "text": "    ", "tags": "", "loc": "BrookReader.TBrookTextReader.html#Close"},
     {"title": "BrookReader.TBrookTextReader.IsEOF", "text": "    <code>True</code> if the reader has reached the End-Of-File. ", "tags": "", "loc": "BrookReader.TBrookTextReader.html#IsEOF"},
     {"title": "BrookReader.TBrookTextReader.ReadBytes", "text": "   ALine[out] Line <a class=\"normal\" href=\"BrookReader.TBrookTextReader.html#Read\">read</a> as bytes.  ALine[out] Line <a class=\"normal\" href=\"BrookReader.TBrookTextReader.html#Read\">read</a> as bytes.", "tags": "", "loc": "BrookReader.TBrookTextReader.html#ReadBytes"},
     {"title": "BrookReader.TBrookTextReader.ReadBytes", "text": "    Line <a class=\"normal\" href=\"BrookReader.TBrookTextReader.html#Read\">read</a> as bytes. ", "tags": "", "loc": "BrookReader.TBrookTextReader.html#ReadBytes"},
     {"title": "BrookReader.TBrookTextReader.Read", "text": "   ALine[out] <a class=\"normal\" href=\"BrookReader.TBrookTextReader.html#Read\">read</a> as static string.  ALine[out] <a class=\"normal\" href=\"BrookReader.TBrookTextReader.html#Read\">read</a> as static string.", "tags": "", "loc": "BrookReader.TBrookTextReader.html#Read"},
     {"title": "BrookReader.TBrookTextReader.Read", "text": "    Line <code>read</code> as static string. ", "tags": "", "loc": "BrookReader.TBrookTextReader.html#Read"},
     {"title": "BrookReader.TBrookTextReader.EOF", "text": " ", "tags": "", "loc": "BrookReader.TBrookTextReader.html#EOF"},
     {"title": "BrookReader.TBrookTextReader.Encoding", "text": " ", "tags": "", "loc": "BrookReader.TBrookTextReader.html#Encoding"},
     {"title": "BrookReader.TBrookStreamReader", "text": " ", "tags": "", "loc": "BrookReader.TBrookStreamReader.html"},
     {"title": "BrookReader.TBrookStreamReader.Create", "text": "  AEncoding[in] Character <a class=\"normal\" href=\"BrookReader.TBrookTextReader.html#Encoding\">encoding</a> determined during reading. AStream[in] <a class=\"normal\" href=\"BrookReader.TBrookStreamReader.html#Stream\">Stream</a> to be <a class=\"normal\" href=\"BrookReader.TBrookStreamReader.html#Read\">read</a> line by line. ABufferSize[in] Buffer size for the line reading. AOwnsStream[in] If <code>True</code> the <a class=\"normal\" href=\"BrookReader.TBrookStreamReader.html#Stream\">stream</a> is freed on <code><a class=\"normal\" href=\"BrookReader.TBrookStreamReader.html#Destroy\">Destroy</a></code>.  AEncoding[in] Character <a class=\"normal\" href=\"BrookReader.TBrookTextReader.html#Encoding\">encoding</a> determined during reading. AStream[in] <a class=\"normal\" href=\"BrookReader.TBrookStreamReader.html#Stream\">Stream</a> to be <a class=\"normal\" href=\"BrookReader.TBrookStreamReader.html#Read\">read</a> line by line. ABufferSize[in] Buffer size for the line reading. AOwnsStream[in] If <code>True</code> the <a class=\"normal\" href=\"BrookReader.TBrookStreamReader.html#Stream\">stream</a> is freed on <code><a class=\"normal\" href=\"BrookReader.TBrookStreamReader.html#Destroy\">Destroy</a></code>.", "tags": "", "loc": "BrookReader.TBrookStreamReader.html#Create"},
     {"title": "BrookReader.TBrookStreamReader.Create", "text": "  AEncoding[in] Character <a class=\"normal\" href=\"BrookReader.TBrookTextReader.html#Encoding\">encoding</a> determined during reading. AStream[in] <a class=\"normal\" href=\"BrookReader.TBrookStreamReader.html#Stream\">Stream</a> to be <a class=\"normal\" href=\"BrookReader.TBrookStreamReader.html#Read\">read</a> line by line.  AEncoding[in] Character <a class=\"normal\" href=\"BrookReader.TBrookTextReader.html#Encoding\">encoding</a> determined during reading. AStream[in] <a class=\"normal\" href=\"BrookReader.TBrookStreamReader.html#Stream\">Stream</a> to be <a class=\"normal\" href=\"BrookReader.TBrookStreamReader.html#Read\">read</a> line by line.", "tags": "", "loc": "BrookReader.TBrookStreamReader.html#Create"},
     {"title": "BrookReader.TBrookStreamReader.Create", "text": "  AStream[in] <a class=\"normal\" href=\"BrookReader.TBrookStreamReader.html#Stream\">Stream</a> to be <a class=\"normal\" href=\"BrookReader.TBrookStreamReader.html#Read\">read</a> line by line.  AStream[in] <a class=\"normal\" href=\"BrookReader.TBrookStreamReader.html#Stream\">Stream</a> to be <a class=\"normal\" href=\"BrookReader.TBrookStreamReader.html#Read\">read</a> line by line.", "tags": "", "loc": "BrookReader.TBrookStreamReader.html#Create"},
     {"title": "BrookReader.TBrookStreamReader.Destroy", "text": "    ", "tags": "", "loc": "BrookReader.TBrookStreamReader.html#Destroy"},
     {"title": "BrookReader.TBrookStreamReader.Reset", "text": "    ", "tags": "", "loc": "BrookReader.TBrookStreamReader.html#Reset"},
     {"title": "BrookReader.TBrookStreamReader.Close", "text": "    ", "tags": "", "loc": "BrookReader.TBrookStreamReader.html#Close"},
     {"title": "BrookReader.TBrookStreamReader.IsEOF", "text": "    <code>True</code> if the <a class=\"normal\" href=\"BrookReader.TBrookStreamReader.html#Stream\">stream</a> has reached the End-Of-File. ", "tags": "", "loc": "BrookReader.TBrookStreamReader.html#IsEOF"},
     {"title": "BrookReader.TBrookStreamReader.ReadBytes", "text": "   ALine[out] Line <a class=\"normal\" href=\"BrookReader.TBrookStreamReader.html#Read\">read</a> as bytes.  ALine[out] Line <a class=\"normal\" href=\"BrookReader.TBrookStreamReader.html#Read\">read</a> as bytes.", "tags": "", "loc": "BrookReader.TBrookStreamReader.html#ReadBytes"},
     {"title": "BrookReader.TBrookStreamReader.ReadBytes", "text": "    Line <a class=\"normal\" href=\"BrookReader.TBrookStreamReader.html#Read\">read</a> as bytes. ", "tags": "", "loc": "BrookReader.TBrookStreamReader.html#ReadBytes"},
     {"title": "BrookReader.TBrookStreamReader.Read", "text": "   ALine[out] <a class=\"normal\" href=\"BrookReader.TBrookStreamReader.html#Read\">read</a> as static string.  ALine[out] <a class=\"normal\" href=\"BrookReader.TBrookStreamReader.html#Read\">read</a> as static string.", "tags": "", "loc": "BrookReader.TBrookStreamReader.html#Read"},
     {"title": "BrookReader.TBrookStreamReader.Read", "text": "    Line <code>read</code> as static string. ", "tags": "", "loc": "BrookReader.TBrookStreamReader.html#Read"},
     {"title": "BrookReader.TBrookStreamReader.Stream", "text": " ", "tags": "", "loc": "BrookReader.TBrookStreamReader.html#Stream"},
     {"title": "BrookReader.TBrookStreamReader.OwnsStream", "text": " ", "tags": "", "loc": "BrookReader.TBrookStreamReader.html#OwnsStream"},
     {"title": "BrookReader.TBrookBaseReader", "text": " ", "tags": "", "loc": "BrookReader.TBrookBaseReader.html"},
     {"title": "BrookReader.TBrookBaseReader.Destroy", "text": "    ", "tags": "", "loc": "BrookReader.TBrookBaseReader.html#Destroy"},
     {"title": "BrookReader.TBrookBaseReader.Reset", "text": "    ", "tags": "", "loc": "BrookReader.TBrookBaseReader.html#Reset"},
     {"title": "BrookReader.TBrookBaseReader.Close", "text": "    ", "tags": "", "loc": "BrookReader.TBrookBaseReader.html#Close"},
     {"title": "BrookReader.TBrookBaseReader.IsEOF", "text": "    <code>True</code> if the reader has reached the End-Of-File. ", "tags": "", "loc": "BrookReader.TBrookBaseReader.html#IsEOF"},
     {"title": "BrookReader.TBrookBaseReader.ReadBytes", "text": "   ALine[out] Line <a class=\"normal\" href=\"BrookReader.TBrookBaseReader.html#Read\">read</a> as bytes.  ALine[out] Line <a class=\"normal\" href=\"BrookReader.TBrookBaseReader.html#Read\">read</a> as bytes.", "tags": "", "loc": "BrookReader.TBrookBaseReader.html#ReadBytes"},
     {"title": "BrookReader.TBrookBaseReader.ReadBytes", "text": "    Line <a class=\"normal\" href=\"BrookReader.TBrookBaseReader.html#Read\">read</a> as bytes. ", "tags": "", "loc": "BrookReader.TBrookBaseReader.html#ReadBytes"},
     {"title": "BrookReader.TBrookBaseReader.Read", "text": "   ALine[out] <a class=\"normal\" href=\"BrookReader.TBrookBaseReader.html#Read\">read</a> as static string.  ALine[out] <a class=\"normal\" href=\"BrookReader.TBrookBaseReader.html#Read\">read</a> as static string.", "tags": "", "loc": "BrookReader.TBrookBaseReader.html#Read"},
     {"title": "BrookReader.TBrookBaseReader.Read", "text": "    Line <code>read</code> as static string. ", "tags": "", "loc": "BrookReader.TBrookBaseReader.html#Read"},
     {"title": "BrookReader.TBrookStringReader", "text": " ", "tags": "", "loc": "BrookReader.TBrookStringReader.html"},
     {"title": "BrookReader.TBrookStringReader.Create", "text": "  AEncoding[in] Character <a class=\"normal\" href=\"BrookReader.TBrookTextReader.html#Encoding\">encoding</a> determined during reading. AString[in] String to be <a class=\"normal\" href=\"BrookReader.TBrookBaseReader.html#Read\">read</a> line by line. ABufferSize[in] Buffer size for the line reading.  AEncoding[in] Character <a class=\"normal\" href=\"BrookReader.TBrookTextReader.html#Encoding\">encoding</a> determined during reading. AString[in] String to be <a class=\"normal\" href=\"BrookReader.TBrookBaseReader.html#Read\">read</a> line by line. ABufferSize[in] Buffer size for the line reading.", "tags": "", "loc": "BrookReader.TBrookStringReader.html#Create"},
     {"title": "BrookReader.TBrookStringReader.Create", "text": "  AEncoding[in] Character <a class=\"normal\" href=\"BrookReader.TBrookTextReader.html#Encoding\">encoding</a> determined during reading. AString[in] String to be <a class=\"normal\" href=\"BrookReader.TBrookBaseReader.html#Read\">read</a> line by line.  AEncoding[in] Character <a class=\"normal\" href=\"BrookReader.TBrookTextReader.html#Encoding\">encoding</a> determined during reading. AString[in] String to be <a class=\"normal\" href=\"BrookReader.TBrookBaseReader.html#Read\">read</a> line by line.", "tags": "", "loc": "BrookReader.TBrookStringReader.html#Create"},
     {"title": "BrookReader.TBrookStringReader.Create", "text": "  AString[in] String to be <a class=\"normal\" href=\"BrookReader.TBrookBaseReader.html#Read\">read</a> line by line.  AString[in] String to be <a class=\"normal\" href=\"BrookReader.TBrookBaseReader.html#Read\">read</a> line by line.", "tags": "", "loc": "BrookReader.TBrookStringReader.html#Create"},
     {"title": "BrookReader.TBrookFileReader", "text": " ", "tags": "", "loc": "BrookReader.TBrookFileReader.html"},
     {"title": "BrookReader.TBrookFileReader.Create", "text": "  AEncoding[in] Character <a class=\"normal\" href=\"BrookReader.TBrookTextReader.html#Encoding\">encoding</a> determined during reading. AFileName[in] File to be <a class=\"normal\" href=\"BrookReader.TBrookBaseReader.html#Read\">read</a> line by line. AMode[in] Open mode and (possibly) a share mode OR-ed together. ARights[in] Permission bits with which to <a class=\"normal\" href=\"BrookReader.TBrookFileReader.html#Create\">create</a> the file on Linux. ABufferSize[in] Buffer size for the line reading.  AEncoding[in] Character <a class=\"normal\" href=\"BrookReader.TBrookTextReader.html#Encoding\">encoding</a> determined during reading. AFileName[in] File to be <a class=\"normal\" href=\"BrookReader.TBrookBaseReader.html#Read\">read</a> line by line. AMode[in] Open mode and (possibly) a share mode OR-ed together. ARights[in] Permission bits with which to <a class=\"normal\" href=\"BrookReader.TBrookFileReader.html#Create\">create</a> the file on Linux. ABufferSize[in] Buffer size for the line reading.", "tags": "", "loc": "BrookReader.TBrookFileReader.html#Create"},
     {"title": "BrookReader.TBrookFileReader.Create", "text": "  AEncoding[in] Character <a class=\"normal\" href=\"BrookReader.TBrookTextReader.html#Encoding\">encoding</a> determined during reading. AFileName[in] File to be <a class=\"normal\" href=\"BrookReader.TBrookBaseReader.html#Read\">read</a> line by line. AMode[in] Open mode and (possibly) a share mode OR-ed together. ABufferSize[in] Buffer size for the line reading.  AEncoding[in] Character <a class=\"normal\" href=\"BrookReader.TBrookTextReader.html#Encoding\">encoding</a> determined during reading. AFileName[in] File to be <a class=\"normal\" href=\"BrookReader.TBrookBaseReader.html#Read\">read</a> line by line. AMode[in] Open mode and (possibly) a share mode OR-ed together. ABufferSize[in] Buffer size for the line reading.", "tags": "", "loc": "BrookReader.TBrookFileReader.html#Create"},
     {"title": "BrookReader.TBrookFileReader.Create", "text": "  AEncoding[in] Character <a class=\"normal\" href=\"BrookReader.TBrookTextReader.html#Encoding\">encoding</a> determined during reading. AFileName[in] File to be <a class=\"normal\" href=\"BrookReader.TBrookBaseReader.html#Read\">read</a> line by line. ABufferSize[in] Buffer size for the line reading.  AEncoding[in] Character <a class=\"normal\" href=\"BrookReader.TBrookTextReader.html#Encoding\">encoding</a> determined during reading. AFileName[in] File to be <a class=\"normal\" href=\"BrookReader.TBrookBaseReader.html#Read\">read</a> line by line. ABufferSize[in] Buffer size for the line reading.", "tags": "", "loc": "BrookReader.TBrookFileReader.html#Create"},
     {"title": "BrookReader.TBrookFileReader.Create", "text": "  AEncoding[in] Character <a class=\"normal\" href=\"BrookReader.TBrookTextReader.html#Encoding\">encoding</a> determined during reading. AFileName[in] File to be <a class=\"normal\" href=\"BrookReader.TBrookBaseReader.html#Read\">read</a> line by line.  AEncoding[in] Character <a class=\"normal\" href=\"BrookReader.TBrookTextReader.html#Encoding\">encoding</a> determined during reading. AFileName[in] File to be <a class=\"normal\" href=\"BrookReader.TBrookBaseReader.html#Read\">read</a> line by line.", "tags": "", "loc": "BrookReader.TBrookFileReader.html#Create"},
     {"title": "BrookReader.TBrookFileReader.Create", "text": "  AFileName[in] File to be <a class=\"normal\" href=\"BrookReader.TBrookBaseReader.html#Read\">read</a> line by line.  AFileName[in] File to be <a class=\"normal\" href=\"BrookReader.TBrookBaseReader.html#Read\">read</a> line by line.", "tags": "", "loc": "BrookReader.TBrookFileReader.html#Create"},
     {"title": "BrookString", "text": " ", "tags": "", "loc": "BrookString.html"},
     {"title": "BrookString.TBrookString", "text": " ", "tags": "", "loc": "BrookString.TBrookString.html"},
     {"title": "BrookString.TBrookString.Create", "text": "   AHandle[in] String <a class=\"normal\" href=\"BrookHandledClasses.TBrookHandledPersistent.html#Handle\">handle</a>.  AHandle[in] String <a class=\"normal\" href=\"BrookHandledClasses.TBrookHandledPersistent.html#Handle\">handle</a>.", "tags": "", "loc": "BrookString.TBrookString.html#Create"},
     {"title": "BrookString.TBrookString.Destroy", "text": "    ", "tags": "", "loc": "BrookString.TBrookString.html#Destroy"},
     {"title": "BrookString.TBrookString.WriteBytes", "text": " All strings previously written are kept.     ASource[in] String buffer source to be written. ALength[in] <a class=\"normal\" href=\"BrookString.TBrookString.html#Length\">Length</a> of the string buffer being written. <a class=\"normal\" href=\"BrookString.TBrookString.html#Length\">Length</a> of the written string buffer. ASource[in] String buffer source to be written. ALength[in] <a class=\"normal\" href=\"BrookString.TBrookString.html#Length\">Length</a> of the string buffer being written.", "tags": "", "loc": "BrookString.TBrookString.html#WriteBytes"},
     {"title": "BrookString.TBrookString.Write", "text": " All strings previously written are kept.    ASource[in] String to be written. AEncoding[in] Determines the encoding of the string being written.  ASource[in] String to be written. AEncoding[in] Determines the encoding of the string being written.", "tags": "", "loc": "BrookString.TBrookString.html#Write"},
     {"title": "BrookString.TBrookString.Write", "text": " All strings previously written are kept.   ASource[in] String to be written.  ASource[in] String to be written.", "tags": "", "loc": "BrookString.TBrookString.html#Write"},
     {"title": "BrookString.TBrookString.ToString", "text": "    ", "tags": "", "loc": "BrookString.TBrookString.html#ToString"},
     {"title": "BrookString.TBrookString.Clear", "text": "    ", "tags": "", "loc": "BrookString.TBrookString.html#Clear"},
     {"title": "BrookString.TBrookString.OwnsHandle", "text": " ", "tags": "", "loc": "BrookString.TBrookString.html#OwnsHandle"},
     {"title": "BrookString.TBrookString.Content", "text": " ", "tags": "", "loc": "BrookString.TBrookString.html#Content"},
     {"title": "BrookString.TBrookString.Length", "text": " ", "tags": "", "loc": "BrookString.TBrookString.html#Length"},
     {"title": "BrookString.TBrookString.Text", "text": " ", "tags": "", "loc": "BrookString.TBrookString.html#Text"},
     {"title": "BrookStringMap", "text": " ", "tags": "", "loc": "BrookStringMap.html"},
     {"title": "BrookStringMap.TBrookStringPair", "text": " ", "tags": "", "loc": "BrookStringMap.TBrookStringPair.html"},
     {"title": "BrookStringMap.TBrookStringPair.Create", "text": "    AName[in] <a class=\"normal\" href=\"BrookStringMap.TBrookStringPair.html#Name\">Name</a> of the pair. AValue[in] <a class=\"normal\" href=\"BrookStringMap.TBrookStringPair.html#Value\">Value</a> of the pair.  AName[in] <a class=\"normal\" href=\"BrookStringMap.TBrookStringPair.html#Name\">Name</a> of the pair. AValue[in] <a class=\"normal\" href=\"BrookStringMap.TBrookStringPair.html#Value\">Value</a> of the pair.", "tags": "", "loc": "BrookStringMap.TBrookStringPair.html#Create"},
     {"title": "BrookStringMap.TBrookStringPair.Name", "text": " ", "tags": "", "loc": "BrookStringMap.TBrookStringPair.html#Name"},
     {"title": "BrookStringMap.TBrookStringPair.Value", "text": " ", "tags": "", "loc": "BrookStringMap.TBrookStringPair.html#Value"},
     {"title": "BrookStringMap.TBrookStringMapEnumerator", "text": " ", "tags": "", "loc": "BrookStringMap.TBrookStringMapEnumerator.html"},
     {"title": "BrookStringMap.TBrookStringMapEnumerator.Create", "text": "   AMap[in] Pairs map.  AMap[in] Pairs map.", "tags": "", "loc": "BrookStringMap.TBrookStringMapEnumerator.html#Create"},
     {"title": "BrookStringMap.TBrookStringMapEnumerator.GetCurrent", "text": "    <a class=\"normal\" href=\"BrookStringMap.TBrookStringMapEnumerator.html#Current\">Current</a> pair. ", "tags": "", "loc": "BrookStringMap.TBrookStringMapEnumerator.html#GetCurrent"},
     {"title": "BrookStringMap.TBrookStringMapEnumerator.MoveNext", "text": "    <code>True</code> when move next reaches the EOF. ", "tags": "", "loc": "BrookStringMap.TBrookStringMapEnumerator.html#MoveNext"},
     {"title": "BrookStringMap.TBrookStringMapEnumerator.Current", "text": " ", "tags": "", "loc": "BrookStringMap.TBrookStringMapEnumerator.html#Current"},
     {"title": "BrookStringMap.TBrookStringMap", "text": " ", "tags": "", "loc": "BrookStringMap.TBrookStringMap.html"},
     {"title": "BrookStringMap.TBrookStringMap.Create", "text": "   AHandle[in] Pointer to store the string map <a class=\"normal\" href=\"BrookHandledClasses.TBrookHandledPersistent.html#Handle\">handle</a>.  AHandle[in] Pointer to store the string map <a class=\"normal\" href=\"BrookHandledClasses.TBrookHandledPersistent.html#Handle\">handle</a>.", "tags": "", "loc": "BrookStringMap.TBrookStringMap.html#Create"},
     {"title": "BrookStringMap.TBrookStringMap.Destroy", "text": "    ", "tags": "", "loc": "BrookStringMap.TBrookStringMap.html#Destroy"},
     {"title": "BrookStringMap.TBrookStringMap.Assign", "text": "   ASource[in] String map source to be copied.  ASource[in] String map source to be copied.", "tags": "", "loc": "BrookStringMap.TBrookStringMap.html#Assign"},
     {"title": "BrookStringMap.TBrookStringMap.IsEmpty", "text": "    <code>True</code> when map is <a class=\"normal\" href=\"BrookStringMap.TBrookStringMap.html#Empty\">empty</a>, <code>False</code> otherwise. ", "tags": "", "loc": "BrookStringMap.TBrookStringMap.html#IsEmpty"},
     {"title": "BrookStringMap.TBrookStringMap.GetEnumerator", "text": "    ", "tags": "", "loc": "BrookStringMap.TBrookStringMap.html#GetEnumerator"},
     {"title": "BrookStringMap.TBrookStringMap.Add", "text": "    AName[in] Name of the pair. AValue[in] Value of the pair.  AName[in] Name of the pair. AValue[in] Value of the pair.", "tags": "", "loc": "BrookStringMap.TBrookStringMap.html#Add"},
     {"title": "BrookStringMap.TBrookStringMap.AddOrSet", "text": "    AName[in] Name of the pair. AValue[in] Value of the pair.  AName[in] Name of the pair. AValue[in] Value of the pair.", "tags": "", "loc": "BrookStringMap.TBrookStringMap.html#AddOrSet"},
     {"title": "BrookStringMap.TBrookStringMap.Remove", "text": "   AName[in] Name of the pair.  AName[in] Name of the pair.", "tags": "", "loc": "BrookStringMap.TBrookStringMap.html#Remove"},
     {"title": "BrookStringMap.TBrookStringMap.Clear", "text": "    ", "tags": "", "loc": "BrookStringMap.TBrookStringMap.html#Clear"},
     {"title": "BrookStringMap.TBrookStringMap.Find", "text": "     AName[in] Name of the pair. APair[out] Reference to store found pair. <code>True</code> when pair is found, <code>False</code> otherwise. AName[in] Name of the pair. APair[out] Reference to store found pair.", "tags": "", "loc": "BrookStringMap.TBrookStringMap.html#Find"},
     {"title": "BrookStringMap.TBrookStringMap.Contains", "text": "    AName[in] Name of the pair. <code>True</code> when map <code>contains</code> the pair, <code>False</code> otherwise. AName[in] Name of the pair.", "tags": "", "loc": "BrookStringMap.TBrookStringMap.html#Contains"},
     {"title": "BrookStringMap.TBrookStringMap.Get", "text": "    AName[in] Name of the pair. Pair value. AName[in] Name of the pair.", "tags": "", "loc": "BrookStringMap.TBrookStringMap.html#Get"},
     {"title": "BrookStringMap.TBrookStringMap.TryValue", "text": "     AName[in] Name of the pair. AValue[out] Reference to store found value. <code>True</code> when pair is found, <code>False</code> otherwise. AName[in] Name of the pair. AValue[out] Reference to store found value.", "tags": "", "loc": "BrookStringMap.TBrookStringMap.html#TryValue"},
     {"title": "BrookStringMap.TBrookStringMap.First", "text": "    APair[out] <code>First</code> pair returned. <code>True</code> when pair is found, <code>False</code> otherwise. APair[out] <code>First</code> pair returned.", "tags": "", "loc": "BrookStringMap.TBrookStringMap.html#First"},
     {"title": "BrookStringMap.TBrookStringMap.Next", "text": "   APair[out] <code>Next</code> pair returned.  APair[out] <code>Next</code> pair returned.", "tags": "", "loc": "BrookStringMap.TBrookStringMap.html#Next"},
     {"title": "BrookStringMap.TBrookStringMap.Iterate", "text": "    AIterator[in] Function to <code>iterate</code> the pairs. AData[in,out] User-specified value.  AIterator[in] Function to <code>iterate</code> the pairs. AData[in,out] User-specified value.", "tags": "", "loc": "BrookStringMap.TBrookStringMap.html#Iterate"},
     {"title": "BrookStringMap.TBrookStringMap.Sort", "text": "    AComparator[in] Function to <code>sort</code> the pairs. AData[in,out] User-specified value.  AComparator[in] Function to <code>sort</code> the pairs. AData[in,out] User-specified value.", "tags": "", "loc": "BrookStringMap.TBrookStringMap.html#Sort"},
     {"title": "BrookStringMap.TBrookStringMap.Fetch", "text": "     AObject[in] Object with properties that correspond to the fetched string map. AAllowed[in] Array of properties to be allowed when fetching. AIgnored[in] Array of properties to be ignored when fetching.  AObject[in] Object with properties that correspond to the fetched string map. AAllowed[in] Array of properties to be allowed when fetching. AIgnored[in] Array of properties to be ignored when fetching.", "tags": "", "loc": "BrookStringMap.TBrookStringMap.html#Fetch"},
     {"title": "BrookStringMap.TBrookStringMap.Fetch", "text": "    ", "tags": "", "loc": "BrookStringMap.TBrookStringMap.html#Fetch"},
     {"title": "BrookStringMap.TBrookStringMap.ToString", "text": "    ", "tags": "", "loc": "BrookStringMap.TBrookStringMap.html#ToString"},
     {"title": "BrookStringMap.TBrookStringMap.Count", "text": " ", "tags": "", "loc": "BrookStringMap.TBrookStringMap.html#Count"},
     {"title": "BrookStringMap.TBrookStringMap.Values", "text": " ", "tags": "", "loc": "BrookStringMap.TBrookStringMap.html#Values"},
     {"title": "BrookStringMap.TBrookStringMap.EOF", "text": " ", "tags": "", "loc": "BrookStringMap.TBrookStringMap.html#EOF"},
     {"title": "BrookStringMap.TBrookStringMap.Empty", "text": " ", "tags": "", "loc": "BrookStringMap.TBrookStringMap.html#Empty"},
     {"title": "BrookStringMap.TBrookStringMap.ClearOnDestroy", "text": " ", "tags": "", "loc": "BrookStringMap.TBrookStringMap.html#ClearOnDestroy"},
     {"title": "BrookStringMap.TBrookStringMap.OnChange", "text": " ", "tags": "", "loc": "BrookStringMap.TBrookStringMap.html#OnChange"},
     {"title": "BrookStringMap.TBrookStringMapOperation", "text": "      sgmoNone None operation or map cleaned.   sgmoAdd Pair added to the map.   sgmoAddOrSet Pair added or set to the map.   sgmoRemove Pair removed from the map.  ", "tags": "", "loc": "BrookStringMap.html#TBrookStringMapOperation"},
     {"title": "BrookStringMap.TBrookStringMapChangeEvent", "text": "    ASender Event caller. AOperation Operation kind.  ASender Event caller. AOperation Operation kind.", "tags": "", "loc": "BrookStringMap.html#TBrookStringMapChangeEvent"},
     {"title": "BrookStringMap.TBrookStringMapIterator", "text": "    AData[in,out] User-defined data. APair[out] Current iterated pair.  AData[in,out] User-defined data. APair[out] Current iterated pair.", "tags": "", "loc": "BrookStringMap.html#TBrookStringMapIterator"},
     {"title": "BrookStringMap.TBrookStringMapComparator", "text": "     AData[in,out] User-defined data. APairA[out] Current left pair (A). APairB[out] Current right pair (B).  AData[in,out] User-defined data. APairA[out] Current left pair (A). APairB[out] Current right pair (B).", "tags": "", "loc": "BrookStringMap.html#TBrookStringMapComparator"},
     {"title": "BrookURLEntryPoints", "text": " ", "tags": "", "loc": "BrookURLEntryPoints.html"},
     {"title": "BrookURLEntryPoints.EBrookURLEntryPoint", "text": " ", "tags": "", "loc": "BrookURLEntryPoints.EBrookURLEntryPoint.html"},
     {"title": "BrookURLEntryPoints.TBrookURLEntryPoint", "text": " ", "tags": "", "loc": "BrookURLEntryPoints.TBrookURLEntryPoint.html"},
     {"title": "BrookURLEntryPoints.TBrookURLEntryPoint.Create", "text": "   ACollection[in] Entry-point list.  ACollection[in] Entry-point list.", "tags": "", "loc": "BrookURLEntryPoints.TBrookURLEntryPoint.html#Create"},
     {"title": "BrookURLEntryPoints.TBrookURLEntryPoint.Validate", "text": "    ", "tags": "", "loc": "BrookURLEntryPoints.TBrookURLEntryPoint.html#Validate"},
     {"title": "BrookURLEntryPoints.TBrookURLEntryPoint.UserData", "text": " ", "tags": "", "loc": "BrookURLEntryPoints.TBrookURLEntryPoint.html#UserData"},
     {"title": "BrookURLEntryPoints.TBrookURLEntryPoint.Name", "text": " ", "tags": "", "loc": "BrookURLEntryPoints.TBrookURLEntryPoint.html#Name"},
     {"title": "BrookURLEntryPoints.TBrookURLEntryPoint.Router", "text": " ", "tags": "", "loc": "BrookURLEntryPoints.TBrookURLEntryPoint.html#Router"},
     {"title": "BrookURLEntryPoints.TBrookURLEntryPointListEnumerator", "text": " ", "tags": "", "loc": "BrookURLEntryPoints.TBrookURLEntryPointListEnumerator.html"},
     {"title": "BrookURLEntryPoints.TBrookURLEntryPointListEnumerator.GetCurrent", "text": "    ", "tags": "", "loc": "BrookURLEntryPoints.TBrookURLEntryPointListEnumerator.html#GetCurrent"},
     {"title": "BrookURLEntryPoints.TBrookURLEntryPointListEnumerator.Current", "text": " ", "tags": "", "loc": "BrookURLEntryPoints.TBrookURLEntryPointListEnumerator.html#Current"},
     {"title": "BrookURLEntryPoints.EBrookURLEntryPointList", "text": " ", "tags": "", "loc": "BrookURLEntryPoints.EBrookURLEntryPointList.html"},
     {"title": "BrookURLEntryPoints.TBrookURLEntryPointList", "text": " ", "tags": "", "loc": "BrookURLEntryPoints.TBrookURLEntryPointList.html"},
     {"title": "BrookURLEntryPoints.TBrookURLEntryPointList.Create", "text": "   AOwner[in] Entry-points persistent.  AOwner[in] Entry-points persistent.", "tags": "", "loc": "BrookURLEntryPoints.TBrookURLEntryPointList.html#Create"},
     {"title": "BrookURLEntryPoints.TBrookURLEntryPointList.Destroy", "text": "    ", "tags": "", "loc": "BrookURLEntryPoints.TBrookURLEntryPointList.html#Destroy"},
     {"title": "BrookURLEntryPoints.TBrookURLEntryPointList.GetEntryPointClass", "text": "    ", "tags": "", "loc": "BrookURLEntryPoints.TBrookURLEntryPointList.html#GetEntryPointClass"},
     {"title": "BrookURLEntryPoints.TBrookURLEntryPointList.GetEnumerator", "text": "    ", "tags": "", "loc": "BrookURLEntryPoints.TBrookURLEntryPointList.html#GetEnumerator"},
     {"title": "BrookURLEntryPoints.TBrookURLEntryPointList.Prepare", "text": "    ", "tags": "", "loc": "BrookURLEntryPoints.TBrookURLEntryPointList.html#Prepare"},
     {"title": "BrookURLEntryPoints.TBrookURLEntryPointList.Unprepare", "text": "    ", "tags": "", "loc": "BrookURLEntryPoints.TBrookURLEntryPointList.html#Unprepare"},
     {"title": "BrookURLEntryPoints.TBrookURLEntryPointList.IsPrepared", "text": "    ", "tags": "", "loc": "BrookURLEntryPoints.TBrookURLEntryPointList.html#IsPrepared"},
     {"title": "BrookURLEntryPoints.TBrookURLEntryPointList.NewName", "text": "    ", "tags": "", "loc": "BrookURLEntryPoints.TBrookURLEntryPointList.html#NewName"},
     {"title": "BrookURLEntryPoints.TBrookURLEntryPointList.Add", "text": "    Entry-point item. ", "tags": "", "loc": "BrookURLEntryPoints.TBrookURLEntryPointList.html#Add"},
     {"title": "BrookURLEntryPoints.TBrookURLEntryPointList.Remove", "text": "    AName[in] Entry-point name. <code>True</code> if an entry-point is removed. AName[in] Entry-point name.", "tags": "", "loc": "BrookURLEntryPoints.TBrookURLEntryPointList.html#Remove"},
     {"title": "BrookURLEntryPoints.TBrookURLEntryPointList.IndexOf", "text": "    ", "tags": "", "loc": "BrookURLEntryPoints.TBrookURLEntryPointList.html#IndexOf"},
     {"title": "BrookURLEntryPoints.TBrookURLEntryPointList.FindInList", "text": "    AName[in] Entry-point name. Entry-point item. AName[in] Entry-point name.", "tags": "", "loc": "BrookURLEntryPoints.TBrookURLEntryPointList.html#FindInList"},
     {"title": "BrookURLEntryPoints.TBrookURLEntryPointList.Find", "text": "     APath[in] Entry-point path. AUserData[out] User-defined data. <code>True</code> if user-data is found. APath[in] Entry-point path. AUserData[out] User-defined data.", "tags": "", "loc": "BrookURLEntryPoints.TBrookURLEntryPointList.html#Find"},
     {"title": "BrookURLEntryPoints.TBrookURLEntryPointList.Clear", "text": "    ", "tags": "", "loc": "BrookURLEntryPoints.TBrookURLEntryPointList.html#Clear"},
     {"title": "BrookURLEntryPoints.TBrookURLEntryPointList.Items", "text": " ", "tags": "", "loc": "BrookURLEntryPoints.TBrookURLEntryPointList.html#Items"},
     {"title": "BrookURLEntryPoints.TBrookURLEntryPointList.Prepared", "text": " ", "tags": "", "loc": "BrookURLEntryPoints.TBrookURLEntryPointList.html#Prepared"},
     {"title": "BrookURLEntryPoints.TBrookURLEntryPoints", "text": " ", "tags": "", "loc": "BrookURLEntryPoints.TBrookURLEntryPoints.html"},
     {"title": "BrookURLEntryPoints.TBrookURLEntryPoints.Create", "text": "   AOwner[in] Owner component.  AOwner[in] Owner component.", "tags": "", "loc": "BrookURLEntryPoints.TBrookURLEntryPoints.html#Create"},
     {"title": "BrookURLEntryPoints.TBrookURLEntryPoints.Destroy", "text": "    ", "tags": "", "loc": "BrookURLEntryPoints.TBrookURLEntryPoints.html#Destroy"},
     {"title": "BrookURLEntryPoints.TBrookURLEntryPoints.GetEnumerator", "text": "    ", "tags": "", "loc": "BrookURLEntryPoints.TBrookURLEntryPoints.html#GetEnumerator"},
     {"title": "BrookURLEntryPoints.TBrookURLEntryPoints.Add", "text": "    Entry-point item. ", "tags": "", "loc": "BrookURLEntryPoints.TBrookURLEntryPoints.html#Add"},
     {"title": "BrookURLEntryPoints.TBrookURLEntryPoints.Remove", "text": "   AName[in] Entry-point name.  AName[in] Entry-point name.", "tags": "", "loc": "BrookURLEntryPoints.TBrookURLEntryPoints.html#Remove"},
     {"title": "BrookURLEntryPoints.TBrookURLEntryPoints.Clear", "text": "    ", "tags": "", "loc": "BrookURLEntryPoints.TBrookURLEntryPoints.html#Clear"},
     {"title": "BrookURLEntryPoints.TBrookURLEntryPoints.Open", "text": "    ", "tags": "", "loc": "BrookURLEntryPoints.TBrookURLEntryPoints.html#Open"},
     {"title": "BrookURLEntryPoints.TBrookURLEntryPoints.Close", "text": "    ", "tags": "", "loc": "BrookURLEntryPoints.TBrookURLEntryPoints.html#Close"},
     {"title": "BrookURLEntryPoints.TBrookURLEntryPoints.Enter", "text": "      ASender[in] Sender object. APath[in] Entry-point path. ARequest[in] Request object to pass to the entry-point found. AResponse: Response object to pass to the entry-point found.  ASender[in] Sender object. APath[in] Entry-point path. ARequest[in] Request object to pass to the entry-point found. AResponse: Response object to pass to the entry-point found.", "tags": "", "loc": "BrookURLEntryPoints.TBrookURLEntryPoints.html#Enter"},
     {"title": "BrookURLEntryPoints.TBrookURLEntryPoints.Enter", "text": "     ASender[in] Sender object. ARequest[in] Request object to pass to the entry-point found. AResponse: Response object to pass to the entry-point found.  ASender[in] Sender object. ARequest[in] Request object to pass to the entry-point found. AResponse: Response object to pass to the entry-point found.", "tags": "", "loc": "BrookURLEntryPoints.TBrookURLEntryPoints.html#Enter"},
     {"title": "BrookURLEntryPoints.TBrookURLEntryPoints.Items", "text": " ", "tags": "", "loc": "BrookURLEntryPoints.TBrookURLEntryPoints.html#Items"},
     {"title": "BrookURLEntryPoints.TBrookURLEntryPoints.Active", "text": " ", "tags": "", "loc": "BrookURLEntryPoints.TBrookURLEntryPoints.html#Active"},
     {"title": "BrookURLEntryPoints.TBrookURLEntryPoints.List", "text": " ", "tags": "", "loc": "BrookURLEntryPoints.TBrookURLEntryPoints.html#List"},
     {"title": "BrookURLEntryPoints.TBrookURLEntryPoints.OnNotFound", "text": " ", "tags": "", "loc": "BrookURLEntryPoints.TBrookURLEntryPoints.html#OnNotFound"},
     {"title": "BrookURLEntryPoints.TBrookURLEntryPoints.OnActivate", "text": " ", "tags": "", "loc": "BrookURLEntryPoints.TBrookURLEntryPoints.html#OnActivate"},
     {"title": "BrookURLEntryPoints.TBrookURLEntryPoints.OnDeactivate", "text": " ", "tags": "", "loc": "BrookURLEntryPoints.TBrookURLEntryPoints.html#OnDeactivate"},
     {"title": "BrookURLEntryPoints.SBrookEntryPointListUnprepared", "text": " ", "tags": "", "loc": "BrookURLEntryPoints.html#SBrookEntryPointListUnprepared"},
     {"title": "BrookURLEntryPoints.SBrookInactiveEntryPoints", "text": " ", "tags": "", "loc": "BrookURLEntryPoints.html#SBrookInactiveEntryPoints"},
     {"title": "BrookURLEntryPoints.SBrookNoEntryPointsDefined", "text": " ", "tags": "", "loc": "BrookURLEntryPoints.html#SBrookNoEntryPointsDefined"},
     {"title": "BrookURLEntryPoints.SBrookEntryPointAlreadyExists", "text": " ", "tags": "", "loc": "BrookURLEntryPoints.html#SBrookEntryPointAlreadyExists"},
     {"title": "BrookURLEntryPoints.SBrookEmptyEntryPointName", "text": " ", "tags": "", "loc": "BrookURLEntryPoints.html#SBrookEmptyEntryPointName"},
     {"title": "BrookURLEntryPoints.SBrookEntryPointNotFound", "text": " ", "tags": "", "loc": "BrookURLEntryPoints.html#SBrookEntryPointNotFound"},
     {"title": "BrookURLEntryPoints.SBrookRouterNotAssigned", "text": " ", "tags": "", "loc": "BrookURLEntryPoints.html#SBrookRouterNotAssigned"},
     {"title": "BrookURLEntryPoints.TBrookURLEntryPointClass", "text": " ", "tags": "", "loc": "BrookURLEntryPoints.html#TBrookURLEntryPointClass"},
     {"title": "BrookURLEntryPoints.TBrookURLEntryPointsNotFoundEvent", "text": "    ", "tags": "", "loc": "BrookURLEntryPoints.html#TBrookURLEntryPointsNotFoundEvent"},
     {"title": "BrookURLRouter", "text": " ", "tags": "", "loc": "BrookURLRouter.html"},
     {"title": "BrookURLRouter.EBrookURLRoute", "text": " ", "tags": "", "loc": "BrookURLRouter.EBrookURLRoute.html"},
     {"title": "BrookURLRouter.TBrookURLRoute", "text": " ", "tags": "", "loc": "BrookURLRouter.TBrookURLRoute.html"},
     {"title": "BrookURLRouter.TBrookURLRoute.DefaultReqMethods", "text": " ", "tags": "", "loc": "BrookURLRouter.TBrookURLRoute.html#DefaultReqMethods"},
     {"title": "BrookURLRouter.TBrookURLRoute.Create", "text": "   ACollection[in] Routes list.  ACollection[in] Routes list.", "tags": "", "loc": "BrookURLRouter.TBrookURLRoute.html#Create"},
     {"title": "BrookURLRouter.TBrookURLRoute.Destroy", "text": "    ", "tags": "", "loc": "BrookURLRouter.TBrookURLRoute.html#Destroy"},
     {"title": "BrookURLRouter.TBrookURLRoute.Validate", "text": "    ", "tags": "", "loc": "BrookURLRouter.TBrookURLRoute.html#Validate"},
     {"title": "BrookURLRouter.TBrookURLRoute.PCRE2Handle", "text": " ", "tags": "", "loc": "BrookURLRouter.TBrookURLRoute.html#PCRE2Handle"},
     {"title": "BrookURLRouter.TBrookURLRoute.Segments", "text": " <a class=\"normal\" href=\"BrookURLRouter.TBrookURLRoute.html#Path\">path</a> levels). ", "tags": "", "loc": "BrookURLRouter.TBrookURLRoute.html#Segments"},
     {"title": "BrookURLRouter.TBrookURLRoute.Variables", "text": " query-string parameters). ", "tags": "", "loc": "BrookURLRouter.TBrookURLRoute.html#Variables"},
     {"title": "BrookURLRouter.TBrookURLRoute.RawPattern", "text": " For example, given a <a class=\"normal\" href=\"BrookURLRouter.TBrookURLRoute.html#Pattern\">pattern</a> <code>/foo</code>, the raw <a class=\"normal\" href=\"BrookURLRouter.TBrookURLRoute.html#Pattern\">pattern</a> is <code>&circ;/foo$</code>. ", "tags": "", "loc": "BrookURLRouter.TBrookURLRoute.html#RawPattern"},
     {"title": "BrookURLRouter.TBrookURLRoute.Path", "text": " ", "tags": "", "loc": "BrookURLRouter.TBrookURLRoute.html#Path"},
     {"title": "BrookURLRouter.TBrookURLRoute.UserData", "text": " ", "tags": "", "loc": "BrookURLRouter.TBrookURLRoute.html#UserData"},
     {"title": "BrookURLRouter.TBrookURLRoute.Default", "text": " ", "tags": "", "loc": "BrookURLRouter.TBrookURLRoute.html#Default"},
     {"title": "BrookURLRouter.TBrookURLRoute.Pattern", "text": " It must be a valid regular expression in PCRE2 syntax. ", "tags": "", "loc": "BrookURLRouter.TBrookURLRoute.html#Pattern"},
     {"title": "BrookURLRouter.TBrookURLRoute.Methods", "text": " ", "tags": "", "loc": "BrookURLRouter.TBrookURLRoute.html#Methods"},
     {"title": "BrookURLRouter.TBrookURLRoute.OnMath", "text": " ", "tags": "", "loc": "BrookURLRouter.TBrookURLRoute.html#OnMath"},
     {"title": "BrookURLRouter.TBrookURLRoute.OnRequestMethod", "text": " ", "tags": "", "loc": "BrookURLRouter.TBrookURLRoute.html#OnRequestMethod"},
     {"title": "BrookURLRouter.TBrookURLRoute.OnRequest", "text": " ", "tags": "", "loc": "BrookURLRouter.TBrookURLRoute.html#OnRequest"},
     {"title": "BrookURLRouter.TBrookURLRoutesEnumerator", "text": " ", "tags": "", "loc": "BrookURLRouter.TBrookURLRoutesEnumerator.html"},
     {"title": "BrookURLRouter.TBrookURLRoutesEnumerator.GetCurrent", "text": "    ", "tags": "", "loc": "BrookURLRouter.TBrookURLRoutesEnumerator.html#GetCurrent"},
     {"title": "BrookURLRouter.TBrookURLRoutesEnumerator.Current", "text": " ", "tags": "", "loc": "BrookURLRouter.TBrookURLRoutesEnumerator.html#Current"},
     {"title": "BrookURLRouter.EBrookURLRoutes", "text": " ", "tags": "", "loc": "BrookURLRouter.EBrookURLRoutes.html"},
     {"title": "BrookURLRouter.TBrookURLRoutes", "text": " ", "tags": "", "loc": "BrookURLRouter.TBrookURLRoutes.html"},
     {"title": "BrookURLRouter.TBrookURLRoutes.Create", "text": "   AOwner[in] Routes persistent.  AOwner[in] Routes persistent.", "tags": "", "loc": "BrookURLRouter.TBrookURLRoutes.html#Create"},
     {"title": "BrookURLRouter.TBrookURLRoutes.Destroy", "text": "    ", "tags": "", "loc": "BrookURLRouter.TBrookURLRoutes.html#Destroy"},
     {"title": "BrookURLRouter.TBrookURLRoutes.GetRouterClass", "text": "    ", "tags": "", "loc": "BrookURLRouter.TBrookURLRoutes.html#GetRouterClass"},
     {"title": "BrookURLRouter.TBrookURLRoutes.GetEnumerator", "text": "    ", "tags": "", "loc": "BrookURLRouter.TBrookURLRoutes.html#GetEnumerator"},
     {"title": "BrookURLRouter.TBrookURLRoutes.NewPattern", "text": "    ", "tags": "", "loc": "BrookURLRouter.TBrookURLRoutes.html#NewPattern"},
     {"title": "BrookURLRouter.TBrookURLRoutes.Add", "text": "    Route item. ", "tags": "", "loc": "BrookURLRouter.TBrookURLRoutes.html#Add"},
     {"title": "BrookURLRouter.TBrookURLRoutes.First", "text": "    ", "tags": "", "loc": "BrookURLRouter.TBrookURLRoutes.html#First"},
     {"title": "BrookURLRouter.TBrookURLRoutes.Last", "text": "    ", "tags": "", "loc": "BrookURLRouter.TBrookURLRoutes.html#Last"},
     {"title": "BrookURLRouter.TBrookURLRoutes.IndexOf", "text": "    ", "tags": "", "loc": "BrookURLRouter.TBrookURLRoutes.html#IndexOf"},
     {"title": "BrookURLRouter.TBrookURLRoutes.Find", "text": "   APattern[in] Route name.  APattern[in] Route name.", "tags": "", "loc": "BrookURLRouter.TBrookURLRoutes.html#Find"},
     {"title": "BrookURLRouter.TBrookURLRoutes.FindDefault", "text": "    ", "tags": "", "loc": "BrookURLRouter.TBrookURLRoutes.html#FindDefault"},
     {"title": "BrookURLRouter.TBrookURLRoutes.Remove", "text": "   APattern[in] Route name.  APattern[in] Route name.", "tags": "", "loc": "BrookURLRouter.TBrookURLRoutes.html#Remove"},
     {"title": "BrookURLRouter.TBrookURLRoutes.Clear", "text": "    ", "tags": "", "loc": "BrookURLRouter.TBrookURLRoutes.html#Clear"},
     {"title": "BrookURLRouter.TBrookURLRoutes.Items", "text": " ", "tags": "", "loc": "BrookURLRouter.TBrookURLRoutes.html#Items"},
     {"title": "BrookURLRouter.TBrookURLRouter", "text": " ", "tags": "", "loc": "BrookURLRouter.TBrookURLRouter.html"},
     {"title": "BrookURLRouter.TBrookURLRouter.Create", "text": "   AOwner[in] Owner component.  AOwner[in] Owner component.", "tags": "", "loc": "BrookURLRouter.TBrookURLRouter.html#Create"},
     {"title": "BrookURLRouter.TBrookURLRouter.Destroy", "text": "    ", "tags": "", "loc": "BrookURLRouter.TBrookURLRouter.html#Destroy"},
     {"title": "BrookURLRouter.TBrookURLRouter.GetEnumerator", "text": "    ", "tags": "", "loc": "BrookURLRouter.TBrookURLRouter.html#GetEnumerator"},
     {"title": "BrookURLRouter.TBrookURLRouter.Add", "text": "    <a class=\"normal\" href=\"BrookURLRouter.TBrookURLRouter.html#Route\">Route</a> item. ", "tags": "", "loc": "BrookURLRouter.TBrookURLRouter.html#Add"},
     {"title": "BrookURLRouter.TBrookURLRouter.Remove", "text": "   APattern[in] <a class=\"normal\" href=\"BrookURLRouter.TBrookURLRouter.html#Route\">Route</a> name.  APattern[in] <a class=\"normal\" href=\"BrookURLRouter.TBrookURLRouter.html#Route\">Route</a> name.", "tags": "", "loc": "BrookURLRouter.TBrookURLRouter.html#Remove"},
     {"title": "BrookURLRouter.TBrookURLRouter.Clear", "text": "    ", "tags": "", "loc": "BrookURLRouter.TBrookURLRouter.html#Clear"},
     {"title": "BrookURLRouter.TBrookURLRouter.Open", "text": "    ", "tags": "", "loc": "BrookURLRouter.TBrookURLRouter.html#Open"},
     {"title": "BrookURLRouter.TBrookURLRouter.Close", "text": "    ", "tags": "", "loc": "BrookURLRouter.TBrookURLRouter.html#Close"},
     {"title": "BrookURLRouter.TBrookURLRouter.DispatchRoute", "text": "    APath[in] <a class=\"normal\" href=\"BrookURLRouter.TBrookURLRouter.html#Route\">Route</a> path. AUserData[in] User-defined data.  APath[in] <a class=\"normal\" href=\"BrookURLRouter.TBrookURLRouter.html#Route\">Route</a> path. AUserData[in] User-defined data.", "tags": "", "loc": "BrookURLRouter.TBrookURLRouter.html#DispatchRoute"},
     {"title": "BrookURLRouter.TBrookURLRouter.Route", "text": "      ASender[in] Sender object. APath[in] <a class=\"normal\" href=\"BrookURLRouter.TBrookURLRouter.html#Route\">Route</a> path. ARequest[in] Request object. AResponse[in] Response object.  ASender[in] Sender object. APath[in] <a class=\"normal\" href=\"BrookURLRouter.TBrookURLRouter.html#Route\">Route</a> path. ARequest[in] Request object. AResponse[in] Response object.", "tags": "", "loc": "BrookURLRouter.TBrookURLRouter.html#Route"},
     {"title": "BrookURLRouter.TBrookURLRouter.Route", "text": "     ASender[in] Sender object. ARequest[in] Request object. AResponse[in] Response object.  ASender[in] Sender object. ARequest[in] Request object. AResponse[in] Response object.", "tags": "", "loc": "BrookURLRouter.TBrookURLRouter.html#Route"},
     {"title": "BrookURLRouter.TBrookURLRouter.Items", "text": " ", "tags": "", "loc": "BrookURLRouter.TBrookURLRouter.html#Items"},
     {"title": "BrookURLRouter.TBrookURLRouter.Active", "text": " ", "tags": "", "loc": "BrookURLRouter.TBrookURLRouter.html#Active"},
     {"title": "BrookURLRouter.TBrookURLRouter.Routes", "text": " ", "tags": "", "loc": "BrookURLRouter.TBrookURLRouter.html#Routes"},
     {"title": "BrookURLRouter.TBrookURLRouter.OnRoute", "text": " ", "tags": "", "loc": "BrookURLRouter.TBrookURLRouter.html#OnRoute"},
     {"title": "BrookURLRouter.TBrookURLRouter.OnNotFound", "text": " ", "tags": "", "loc": "BrookURLRouter.TBrookURLRouter.html#OnNotFound"},
     {"title": "BrookURLRouter.TBrookURLRouter.OnActivate", "text": " ", "tags": "", "loc": "BrookURLRouter.TBrookURLRouter.html#OnActivate"},
     {"title": "BrookURLRouter.TBrookURLRouter.OnDeactivate", "text": " ", "tags": "", "loc": "BrookURLRouter.TBrookURLRouter.html#OnDeactivate"},
     {"title": "BrookURLRouter.SBrookInactiveRouter", "text": " ", "tags": "", "loc": "BrookURLRouter.html#SBrookInactiveRouter"},
     {"title": "BrookURLRouter.SBrookNoRoutesDefined", "text": " ", "tags": "", "loc": "BrookURLRouter.html#SBrookNoRoutesDefined"},
     {"title": "BrookURLRouter.SBrookEmptyRoutePattern", "text": " ", "tags": "", "loc": "BrookURLRouter.html#SBrookEmptyRoutePattern"},
     {"title": "BrookURLRouter.SBrookRouteAlreadyExists", "text": " ", "tags": "", "loc": "BrookURLRouter.html#SBrookRouteAlreadyExists"},
     {"title": "BrookURLRouter.SBrookRequestMethodNotAllowed", "text": " ", "tags": "", "loc": "BrookURLRouter.html#SBrookRequestMethodNotAllowed"},
     {"title": "BrookURLRouter.SBrookRequestNoMethodDefined", "text": " ", "tags": "", "loc": "BrookURLRouter.html#SBrookRequestNoMethodDefined"},
     {"title": "BrookURLRouter.SBrookRouteNotFound", "text": " ", "tags": "", "loc": "BrookURLRouter.html#SBrookRouteNotFound"},
     {"title": "BrookURLRouter.SBrookDefaultRouteAlreadyExists", "text": " ", "tags": "", "loc": "BrookURLRouter.html#SBrookDefaultRouteAlreadyExists"},
     {"title": "BrookURLRouter.TBrookURLRouteMatchEvent", "text": "    ", "tags": "", "loc": "BrookURLRouter.html#TBrookURLRouteMatchEvent"},
     {"title": "BrookURLRouter.TBrookURLRouteRequestEvent", "text": "    ", "tags": "", "loc": "BrookURLRouter.html#TBrookURLRouteRequestEvent"},
     {"title": "BrookURLRouter.TBrookURLRouteRequestMethodEvent", "text": "    ", "tags": "", "loc": "BrookURLRouter.html#TBrookURLRouteRequestMethodEvent"},
     {"title": "BrookURLRouter.TBrookURLRouteClass", "text": " ", "tags": "", "loc": "BrookURLRouter.html#TBrookURLRouteClass"},
     {"title": "BrookURLRouter.TBrookURLRouterRouteEvent", "text": "    ", "tags": "", "loc": "BrookURLRouter.html#TBrookURLRouterRouteEvent"},
     {"title": "BrookUtility", "text": " ", "tags": "", "loc": "BrookUtility.html"},
     {"title": "BrookUtility.Sagui", "text": " ", "tags": "", "loc": "BrookUtility.Sagui.html"},
     {"title": "BrookUtility.Sagui.Version", "text": "    Library <a class=\"normal\" href=\"BrookUtility.Sagui.html#Version\">version</a> packed into a single integer. ", "tags": "", "loc": "BrookUtility.Sagui.html#Version"},
     {"title": "BrookUtility.Sagui.Version", "text": "      AMajor[out] Major number. AMinor[out] Minor number. APatch[out] Patch number. Library <code>version</code> packed into a single integer. AMajor[out] Major number. AMinor[out] Minor number. APatch[out] Patch number.", "tags": "", "loc": "BrookUtility.Sagui.html#Version"},
     {"title": "BrookUtility.Sagui.VersionStr", "text": "    Library <a class=\"normal\" href=\"BrookUtility.Sagui.html#Version\">version</a> packed into a static string. ", "tags": "", "loc": "BrookUtility.Sagui.html#VersionStr"},
     {"title": "BrookUtility.Sagui.Malloc", "text": "    ASize[in] Memory size to be allocated. Pointer of the allocated zero-initialized memory.  <p><b>Returns values:</b> </p>  <dl class=\"paragraph_spacing\">   <dt><code>nil</code></dt>   <dd><p>If size is <code>0</code> or no memory space.</p></dd> </dl>  <p>  ASize[in] Memory size to be allocated.", "tags": "", "loc": "BrookUtility.Sagui.html#Malloc"},
     {"title": "BrookUtility.Sagui.Alloc", "text": "    ASize[in] Memory size to be allocated. Pointer of the allocated zero-initialized memory.  <p><b>Returns values:</b> </p>  <dl class=\"paragraph_spacing\">   <dt><code>nil</code></dt>   <dd><p>If size is <code>0</code> or no memory space.</p></dd> </dl>  <p>  ASize[in] Memory size to be allocated.", "tags": "", "loc": "BrookUtility.Sagui.html#Alloc"},
     {"title": "BrookUtility.Sagui.Realloc", "text": "     APointer[in] Pointer of the memory to be reallocated. ASize[in] Memory size to be allocated. Pointer of the reallocated memory. APointer[in] Pointer of the memory to be reallocated. ASize[in] Memory size to be allocated.", "tags": "", "loc": "BrookUtility.Sagui.html#Realloc"},
     {"title": "BrookUtility.Sagui.Free", "text": "   APointer[in] Pointer of the memory to be freed.  APointer[in] Pointer of the memory to be freed.", "tags": "", "loc": "BrookUtility.Sagui.html#Free"},
     {"title": "BrookUtility.Sagui.StrError", "text": "     AErrorNum[in] Error number. AErrorMsg[out] Referenced string to store the error message. AErrorLen[in] Length of the error message.  AErrorNum[in] Error number. AErrorMsg[out] Referenced string to store the error message. AErrorLen[in] Length of the error message.", "tags": "", "loc": "BrookUtility.Sagui.html#StrError"},
     {"title": "BrookUtility.Sagui.StrError", "text": "    AErrorNum[in] Error number. Static string describing the error. AErrorNum[in] Error number.", "tags": "", "loc": "BrookUtility.Sagui.html#StrError"},
     {"title": "BrookUtility.Sagui.IsPost", "text": "    AMethod[in] HTTP verb. True if given method is POST, PUT, DELETE or OPTIONS. AMethod[in] HTTP verb.", "tags": "", "loc": "BrookUtility.Sagui.html#IsPost"},
     {"title": "BrookUtility.Sagui.ExtractEntryPoint", "text": " For example, given a path <code>/api1/customer</code>, the part considered as entry-point is <code>/api1</code>.    APath[in] Path as static string. Entry-point as static string. APath[in] Path as static string.", "tags": "", "loc": "BrookUtility.Sagui.html#ExtractEntryPoint"},
     {"title": "BrookUtility.Sagui.TmpDir", "text": "    Temporary directory as static string. ", "tags": "", "loc": "BrookUtility.Sagui.html#TmpDir"},
     {"title": "BrookUtility.Sagui.EOR", "text": "    AError[in] <code>True</code> to return a value indicating a stream reading error. Value to end a stream reading. AError[in] <code>True</code> to return a value indicating a stream reading error.", "tags": "", "loc": "BrookUtility.Sagui.html#EOR"},
     {"title": "BrookUtility.Sagui.IP", "text": "    ASocket[in] Socket handle. Formatted <code>IP</code> into a string. ASocket[in] Socket handle.", "tags": "", "loc": "BrookUtility.Sagui.html#IP"},
     {"title": "BrookUtility.Brook", "text": " ", "tags": "", "loc": "BrookUtility.Brook.html"},
     {"title": "BrookUtility.Brook.DAYS", "text": " ", "tags": "", "loc": "BrookUtility.Brook.html#DAYS"},
     {"title": "BrookUtility.Brook.MONTHS", "text": " ", "tags": "", "loc": "BrookUtility.Brook.html#MONTHS"},
     {"title": "BrookUtility.Brook.FixPath", "text": "    APath[in] Path as static string. Fixed path, e.g.: path -&gt; /path and /path/ -&gt; /path APath[in] Path as static string.", "tags": "", "loc": "BrookUtility.Brook.html#FixPath"},
     {"title": "BrookUtility.Brook.FixEntryPoint", "text": "    APath[in] Path as static string. Fixed entry-point, e.g.: /foo/bar -&gt; /foo  APath[in] Path as static string.", "tags": "", "loc": "BrookUtility.Brook.html#FixEntryPoint"},
     {"title": "BrookUtility.Brook.DateTimeToUTC", "text": "    ADateTime[in] Local date/time. Local time converted to UTC. ADateTime[in] Local date/time.", "tags": "", "loc": "BrookUtility.Brook.html#DateTimeToUTC"},
     {"title": "BrookUtility.Brook.DateTimeToGMT", "text": "    ADateTime[in] Local date/time. Local time converted to GMT string. ADateTime[in] Local date/time.", "tags": "", "loc": "BrookUtility.Brook.html#DateTimeToGMT"},
     {"title": "BrookUtility.Brook.SHA1", "text": "    S[in] String to generate the SHA-1. Generated SHA-1 as static string. S[in] String to generate the SHA-1.", "tags": "", "loc": "BrookUtility.Brook.html#SHA1"},
     {"title": "BrookUtility.TBrookHTTPRequestMethodHelper", "text": " ", "tags": "", "loc": "BrookUtility.TBrookHTTPRequestMethodHelper.html"},
     {"title": "BrookUtility.TBrookHTTPRequestMethodHelper.METHODS", "text": " ", "tags": "", "loc": "BrookUtility.TBrookHTTPRequestMethodHelper.html#METHODS"},
     {"title": "BrookUtility.TBrookHTTPRequestMethodHelper.ToString", "text": "    ", "tags": "", "loc": "BrookUtility.TBrookHTTPRequestMethodHelper.html#ToString"},
     {"title": "BrookUtility.TBrookHTTPRequestMethodHelper.FromString", "text": "    ", "tags": "", "loc": "BrookUtility.TBrookHTTPRequestMethodHelper.html#FromString"},
     {"title": "BrookUtility.tkPrimitives", "text": " ", "tags": "", "loc": "BrookUtility.html#tkPrimitives"},
     {"title": "BrookUtility.TBrookErrorEvent", "text": "    ASender[in] Sender object. AException[in] Exception object.  ASender[in] Sender object. AException[in] Exception object.", "tags": "", "loc": "BrookUtility.html#TBrookErrorEvent"},
     {"title": "BrookUtility.TBrookHTTPRequestMethod", "text": "  rmUnknown    rmGET    rmPOST    rmPUT    rmDELETE    rmPATCH    rmOPTIONS    rmHEAD   ", "tags": "", "loc": "BrookUtility.html#TBrookHTTPRequestMethod"},
     {"title": "BrookUtility.TBrookHTTPRequestMethods", "text": " ", "tags": "", "loc": "BrookUtility.html#TBrookHTTPRequestMethods"}
]};
